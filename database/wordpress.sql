-- MySQL dump 10.16  Distrib 10.2.10-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: wordpress
-- ------------------------------------------------------
-- Server version	10.2.10-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `wp_actionscheduler_actions`
--

DROP TABLE IF EXISTS `wp_actionscheduler_actions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_actionscheduler_actions` (
  `action_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `hook` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL,
  `scheduled_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `scheduled_date_local` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `args` varchar(191) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `schedule` longtext COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `group_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `attempts` int(11) NOT NULL DEFAULT 0,
  `last_attempt_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `last_attempt_local` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `claim_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `extended_args` varchar(8000) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`action_id`),
  KEY `hook` (`hook`),
  KEY `status` (`status`),
  KEY `scheduled_date_gmt` (`scheduled_date_gmt`),
  KEY `args` (`args`),
  KEY `group_id` (`group_id`),
  KEY `last_attempt_gmt` (`last_attempt_gmt`),
  KEY `claim_id` (`claim_id`)
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_actionscheduler_actions`
--

LOCK TABLES `wp_actionscheduler_actions` WRITE;
/*!40000 ALTER TABLE `wp_actionscheduler_actions` DISABLE KEYS */;
INSERT INTO `wp_actionscheduler_actions` VALUES (46,'wp_mail_smtp_admin_notifications_update','complete','0000-00-00 00:00:00','0000-00-00 00:00:00','{\"tasks_meta_id\":5}','O:28:\"ActionScheduler_NullSchedule\":0:{}',2,1,'2020-09-27 07:55:15','2020-09-27 15:55:15',0,NULL),(47,'wp_mail_smtp_admin_notifications_update','complete','0000-00-00 00:00:00','0000-00-00 00:00:00','{\"tasks_meta_id\":6}','O:28:\"ActionScheduler_NullSchedule\":0:{}',2,1,'2020-10-11 02:39:03','2020-10-11 10:39:03',0,NULL);
/*!40000 ALTER TABLE `wp_actionscheduler_actions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_actionscheduler_claims`
--

DROP TABLE IF EXISTS `wp_actionscheduler_claims`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_actionscheduler_claims` (
  `claim_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `date_created_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`claim_id`),
  KEY `date_created_gmt` (`date_created_gmt`)
) ENGINE=InnoDB AUTO_INCREMENT=8955 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_actionscheduler_claims`
--

LOCK TABLES `wp_actionscheduler_claims` WRITE;
/*!40000 ALTER TABLE `wp_actionscheduler_claims` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_actionscheduler_claims` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_actionscheduler_groups`
--

DROP TABLE IF EXISTS `wp_actionscheduler_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_actionscheduler_groups` (
  `group_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `slug` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`group_id`),
  KEY `slug` (`slug`(191))
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_actionscheduler_groups`
--

LOCK TABLES `wp_actionscheduler_groups` WRITE;
/*!40000 ALTER TABLE `wp_actionscheduler_groups` DISABLE KEYS */;
INSERT INTO `wp_actionscheduler_groups` VALUES (1,'action-scheduler-migration'),(2,'wp_mail_smtp');
/*!40000 ALTER TABLE `wp_actionscheduler_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_actionscheduler_logs`
--

DROP TABLE IF EXISTS `wp_actionscheduler_logs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_actionscheduler_logs` (
  `log_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `action_id` bigint(20) unsigned NOT NULL,
  `message` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `log_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `log_date_local` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`log_id`),
  KEY `action_id` (`action_id`),
  KEY `log_date_gmt` (`log_date_gmt`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_actionscheduler_logs`
--

LOCK TABLES `wp_actionscheduler_logs` WRITE;
/*!40000 ALTER TABLE `wp_actionscheduler_logs` DISABLE KEYS */;
INSERT INTO `wp_actionscheduler_logs` VALUES (22,46,'action created','2020-09-27 07:54:17','2020-09-27 07:54:17'),(23,46,'action started via Async Request','2020-09-27 07:55:14','2020-09-27 07:55:14'),(24,46,'action complete via Async Request','2020-09-27 07:55:15','2020-09-27 07:55:15'),(25,47,'action created','2020-10-11 02:35:30','2020-10-11 02:35:30'),(26,47,'action started via WP Cron','2020-10-11 02:39:03','2020-10-11 02:39:03'),(27,47,'action complete via WP Cron','2020-10-11 02:39:03','2020-10-11 02:39:03');
/*!40000 ALTER TABLE `wp_actionscheduler_logs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_commentmeta`
--

DROP TABLE IF EXISTS `wp_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_commentmeta`
--

LOCK TABLES `wp_commentmeta` WRITE;
/*!40000 ALTER TABLE `wp_commentmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_comments`
--

DROP TABLE IF EXISTS `wp_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT 0,
  `comment_author` tinytext COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_author_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT 0,
  `comment_approved` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'comment',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT 0,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_comments`
--

LOCK TABLES `wp_comments` WRITE;
/*!40000 ALTER TABLE `wp_comments` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_links`
--

DROP TABLE IF EXISTS `wp_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT 1,
  `link_rating` int(11) NOT NULL DEFAULT 0,
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_notes` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `link_rss` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_links`
--

LOCK TABLES `wp_links` WRITE;
/*!40000 ALTER TABLE `wp_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_options`
--

DROP TABLE IF EXISTS `wp_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `option_value` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `autoload` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`),
  KEY `autoload` (`autoload`)
) ENGINE=InnoDB AUTO_INCREMENT=9782 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_options`
--

LOCK TABLES `wp_options` WRITE;
/*!40000 ALTER TABLE `wp_options` DISABLE KEYS */;
INSERT INTO `wp_options` VALUES (1,'siteurl','https://willconnelly.com.au','yes'),(2,'home','https://willconnelly.com.au','yes'),(3,'blogname','Will Connelly','yes'),(4,'blogdescription','','yes'),(5,'users_can_register','0','yes'),(6,'admin_email','connelly.william@gmail.com','yes'),(7,'start_of_week','0','yes'),(8,'use_balanceTags','0','yes'),(9,'use_smilies','1','yes'),(10,'require_name_email','1','yes'),(11,'comments_notify','1','yes'),(12,'posts_per_rss','10','yes'),(13,'rss_use_excerpt','0','yes'),(14,'mailserver_url','mail.example.com','yes'),(15,'mailserver_login','login@example.com','yes'),(16,'mailserver_pass','password','yes'),(17,'mailserver_port','110','yes'),(18,'default_category','1','yes'),(19,'default_comment_status','open','yes'),(20,'default_ping_status','open','yes'),(21,'default_pingback_flag','1','yes'),(22,'posts_per_page','10','yes'),(23,'date_format','j F Y','yes'),(24,'time_format','H:i','yes'),(25,'links_updated_date_format','j F Y g:i a','yes'),(26,'comment_moderation','0','yes'),(27,'moderation_notify','1','yes'),(28,'permalink_structure','/index.php/%year%/%monthnum%/%day%/%postname%/','yes'),(29,'rewrite_rules','a:97:{s:11:\"^wp-json/?$\";s:22:\"index.php?rest_route=/\";s:14:\"^wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:21:\"^index.php/wp-json/?$\";s:22:\"index.php?rest_route=/\";s:24:\"^index.php/wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:17:\"^wp-sitemap\\.xml$\";s:23:\"index.php?sitemap=index\";s:17:\"^wp-sitemap\\.xsl$\";s:36:\"index.php?sitemap-stylesheet=sitemap\";s:23:\"^wp-sitemap-index\\.xsl$\";s:34:\"index.php?sitemap-stylesheet=index\";s:48:\"^wp-sitemap-([a-z]+?)-([a-z\\d_-]+?)-(\\d+?)\\.xml$\";s:75:\"index.php?sitemap=$matches[1]&sitemap-subtype=$matches[2]&paged=$matches[3]\";s:34:\"^wp-sitemap-([a-z]+?)-(\\d+?)\\.xml$\";s:47:\"index.php?sitemap=$matches[1]&paged=$matches[2]\";s:57:\"index.php/category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:52:\"index.php/category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:33:\"index.php/category/(.+?)/embed/?$\";s:46:\"index.php?category_name=$matches[1]&embed=true\";s:45:\"index.php/category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:27:\"index.php/category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:54:\"index.php/tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:49:\"index.php/tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:30:\"index.php/tag/([^/]+)/embed/?$\";s:36:\"index.php?tag=$matches[1]&embed=true\";s:42:\"index.php/tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:24:\"index.php/tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:55:\"index.php/type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:50:\"index.php/type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:31:\"index.php/type/([^/]+)/embed/?$\";s:44:\"index.php?post_format=$matches[1]&embed=true\";s:43:\"index.php/type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:25:\"index.php/type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:13:\"favicon\\.ico$\";s:19:\"index.php?favicon=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:42:\"index.php/feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:37:\"index.php/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:18:\"index.php/embed/?$\";s:21:\"index.php?&embed=true\";s:30:\"index.php/page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:37:\"index.php/comment-page-([0-9]{1,})/?$\";s:38:\"index.php?&page_id=5&cpage=$matches[1]\";s:51:\"index.php/comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:46:\"index.php/comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:27:\"index.php/comments/embed/?$\";s:21:\"index.php?&embed=true\";s:54:\"index.php/search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:49:\"index.php/search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:30:\"index.php/search/(.+)/embed/?$\";s:34:\"index.php?s=$matches[1]&embed=true\";s:42:\"index.php/search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:24:\"index.php/search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:57:\"index.php/author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:52:\"index.php/author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:33:\"index.php/author/([^/]+)/embed/?$\";s:44:\"index.php?author_name=$matches[1]&embed=true\";s:45:\"index.php/author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:27:\"index.php/author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:79:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:74:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:55:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/embed/?$\";s:74:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&embed=true\";s:67:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:49:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:66:\"index.php/([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:61:\"index.php/([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:42:\"index.php/([0-9]{4})/([0-9]{1,2})/embed/?$\";s:58:\"index.php?year=$matches[1]&monthnum=$matches[2]&embed=true\";s:54:\"index.php/([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:36:\"index.php/([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:53:\"index.php/([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:48:\"index.php/([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:29:\"index.php/([0-9]{4})/embed/?$\";s:37:\"index.php?year=$matches[1]&embed=true\";s:41:\"index.php/([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:23:\"index.php/([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:68:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:78:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:98:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:93:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:93:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:74:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:63:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/embed/?$\";s:91:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&embed=true\";s:67:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/trackback/?$\";s:85:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&tb=1\";s:87:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:97:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&feed=$matches[5]\";s:82:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:97:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&feed=$matches[5]\";s:75:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/page/?([0-9]{1,})/?$\";s:98:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&paged=$matches[5]\";s:82:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/comment-page-([0-9]{1,})/?$\";s:98:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&cpage=$matches[5]\";s:71:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)(?:/([0-9]+))?/?$\";s:97:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&page=$matches[5]\";s:57:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:67:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:87:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:82:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:82:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:63:\"index.php/[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:74:\"index.php/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/comment-page-([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&cpage=$matches[4]\";s:61:\"index.php/([0-9]{4})/([0-9]{1,2})/comment-page-([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&cpage=$matches[3]\";s:48:\"index.php/([0-9]{4})/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&cpage=$matches[2]\";s:37:\"index.php/.?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:47:\"index.php/.?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:67:\"index.php/.?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:62:\"index.php/.?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:62:\"index.php/.?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:43:\"index.php/.?.+?/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:26:\"index.php/(.?.+?)/embed/?$\";s:41:\"index.php?pagename=$matches[1]&embed=true\";s:30:\"index.php/(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:50:\"index.php/(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:45:\"index.php/(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:38:\"index.php/(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:45:\"index.php/(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:34:\"index.php/(.?.+?)(?:/([0-9]+))?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";}','yes'),(30,'hack_file','0','yes'),(31,'blog_charset','UTF-8','yes'),(32,'moderation_keys','','no'),(33,'active_plugins','a:3:{i:0;s:36:\"contact-form-7/wp-contact-form-7.php\";i:1;s:9:\"hello.php\";i:2;s:29:\"wp-mail-smtp/wp_mail_smtp.php\";}','yes'),(34,'category_base','','yes'),(35,'ping_sites','http://rpc.pingomatic.com/','yes'),(36,'comment_max_links','2','yes'),(37,'gmt_offset','8','yes'),(38,'default_email_category','1','yes'),(39,'recently_edited','a:5:{i:0;s:52:\"/var/www/html/wp-content/themes/foliopress/style.css\";i:1;s:53:\"/var/www/html/wp-content/themes/foliopress/header.php\";i:2;s:76:\"/var/www/html/wp-content/themes/foliopress/font-awesome/css/font-awesome.css\";i:4;s:50:\"/var/www/html/wp-content/themes/foliopress/rtl.css\";i:5;s:69:\"/var/www/html/wp-content/themes/foliopress/inc/customize-controls.css\";}','no'),(40,'template','foliopress','yes'),(41,'stylesheet','foliopress','yes'),(42,'comment_registration','0','yes'),(43,'html_type','text/html','yes'),(44,'use_trackback','0','yes'),(45,'default_role','subscriber','yes'),(46,'db_version','48748','yes'),(47,'uploads_use_yearmonth_folders','1','yes'),(48,'upload_path','','yes'),(49,'blog_public','1','yes'),(50,'default_link_category','2','yes'),(51,'show_on_front','posts','yes'),(52,'tag_base','','yes'),(53,'show_avatars','1','yes'),(54,'avatar_rating','G','yes'),(55,'upload_url_path','','yes'),(56,'thumbnail_size_w','150','yes'),(57,'thumbnail_size_h','150','yes'),(58,'thumbnail_crop','1','yes'),(59,'medium_size_w','300','yes'),(60,'medium_size_h','300','yes'),(61,'avatar_default','mystery','yes'),(62,'large_size_w','1024','yes'),(63,'large_size_h','1024','yes'),(64,'image_default_link_type','none','yes'),(65,'image_default_size','','yes'),(66,'image_default_align','','yes'),(67,'close_comments_for_old_posts','0','yes'),(68,'close_comments_days_old','14','yes'),(69,'thread_comments','1','yes'),(70,'thread_comments_depth','5','yes'),(71,'page_comments','0','yes'),(72,'comments_per_page','50','yes'),(73,'default_comments_page','newest','yes'),(74,'comment_order','asc','yes'),(75,'sticky_posts','a:0:{}','yes'),(76,'widget_categories','a:2:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(77,'widget_text','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(78,'widget_rss','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(79,'uninstall_plugins','a:0:{}','no'),(80,'timezone_string','','yes'),(81,'page_for_posts','0','yes'),(82,'page_on_front','5','yes'),(83,'default_post_format','0','yes'),(84,'link_manager_enabled','0','yes'),(85,'finished_splitting_shared_terms','1','yes'),(86,'site_icon','0','yes'),(87,'medium_large_size_w','768','yes'),(88,'medium_large_size_h','0','yes'),(89,'wp_page_for_privacy_policy','3','yes'),(90,'show_comments_cookies_opt_in','1','yes'),(91,'admin_email_lifespan','1613055074','yes'),(92,'disallowed_keys','','no'),(93,'comment_previously_approved','1','yes'),(94,'auto_plugin_theme_update_emails','a:0:{}','no'),(95,'initial_db_version','48748','yes'),(96,'wp_user_roles','a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:61:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}','yes'),(97,'fresh_site','0','yes'),(98,'WPLANG','en_AU','yes'),(99,'widget_search','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(100,'widget_recent-posts','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(101,'widget_recent-comments','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(102,'widget_archives','a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(103,'widget_meta','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(104,'sidebars_widgets','a:7:{s:19:\"wp_inactive_widgets\";a:0:{}s:23:\"foliopress_left_sidebar\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:24:\"foliopress_right_sidebar\";a:0:{}s:25:\"foliopress_footer_sidebar\";a:0:{}s:25:\"foliopress_footer_column2\";a:0:{}s:25:\"foliopress_footer_column3\";a:0:{}s:13:\"array_version\";i:3;}','yes'),(105,'cron','a:7:{i:1602760035;a:1:{s:26:\"action_scheduler_run_queue\";a:1:{s:32:\"0d04ed39571b55704c122d726248bbac\";a:3:{s:8:\"schedule\";s:12:\"every_minute\";s:4:\"args\";a:1:{i:0;s:7:\"WP Cron\";}s:8:\"interval\";i:60;}}}i:1602762674;a:1:{s:34:\"wp_privacy_delete_old_export_files\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"hourly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:3600;}}}i:1602773474;a:4:{s:32:\"recovery_mode_clean_expired_keys\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1602773484;a:2:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:25:\"delete_expired_transients\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1602773486;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1603032674;a:1:{s:30:\"wp_site_health_scheduled_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"weekly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:604800;}}}s:7:\"version\";i:2;}','yes'),(106,'widget_pages','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(107,'widget_calendar','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(108,'widget_media_audio','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(109,'widget_media_image','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(110,'widget_media_gallery','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(111,'widget_media_video','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(112,'widget_tag_cloud','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(113,'widget_nav_menu','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(114,'widget_custom_html','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(116,'theme_mods_twentytwenty','a:3:{s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1597637336;s:4:\"data\";a:3:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:9:\"sidebar-2\";a:0:{}}}s:18:\"nav_menu_locations\";a:0:{}}','yes'),(117,'recovery_keys','a:0:{}','yes'),(134,'can_compress_scripts','1','no'),(139,'finished_updating_comment_type','1','yes'),(143,'current_theme','FolioPress','yes'),(144,'theme_mods_twentynineteen','a:4:{i:0;b:0;s:18:\"nav_menu_locations\";a:0:{}s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1597509672;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}}}}','yes'),(145,'theme_switched','','yes'),(148,'new_admin_email','connelly.william@gmail.com','yes'),(192,'_transient_health-check-site-status-result','{\"good\":10,\"recommended\":8,\"critical\":2}','yes'),(219,'theme_mods_foliopress','a:16:{i:0;b:0;s:18:\"nav_menu_locations\";a:1:{s:7:\"primary\";i:2;}s:18:\"custom_css_post_id\";i:83;s:22:\"foliopress_site_layout\";s:4:\"wide\";s:25:\"foliopress_content_layout\";s:9:\"nosidebar\";s:22:\"foliopress_post_layout\";s:9:\"list_view\";s:22:\"foliopress_hide_search\";i:0;s:23:\"foliopress_header_fixed\";i:0;s:20:\"foliopress_my_avatar\";s:63:\"https://willconnelly.com.au/wp-content/uploads/2020/08/me-2.png\";s:16:\"header_textcolor\";s:5:\"blank\";s:12:\"header_image\";s:13:\"remove-header\";s:24:\"foliopress_my_info_title\";s:16:\"William Connelly\";s:18:\"foliopress_my_desc\";s:86:\"Software developer, tinkerer, explorer. Living and working in Perth, Western Australia\";s:26:\"foliopress_social_profiles\";s:28:\"https://github.com/willconno\";s:25:\"foliopress_featured_image\";i:1;s:23:\"foliopress_header_fluid\";i:1;}','yes'),(235,'recently_activated','a:0:{}','yes'),(237,'widget_akismet_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(246,'wpcf7','a:2:{s:7:\"version\";s:5:\"5.2.2\";s:13:\"bulk_validate\";a:4:{s:9:\"timestamp\";i:1597638683;s:7:\"version\";s:5:\"5.2.1\";s:11:\"count_valid\";i:1;s:13:\"count_invalid\";i:0;}}','yes'),(248,'secret_key','yxmKqIb<xHz_VSJ{GMSk<vd>f69!g1)y5XsXt,Kd@v@Day|GV @#HMzTEb$-Mt)&','no'),(249,'nav_menu_options','a:1:{s:8:\"auto_add\";a:1:{i:0;i:2;}}','yes'),(280,'_site_transient_update_themes','O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1602732519;s:7:\"checked\";a:4:{s:10:\"foliopress\";s:5:\"1.1.5\";s:14:\"twentynineteen\";s:3:\"1.7\";s:15:\"twentyseventeen\";s:3:\"2.4\";s:12:\"twentytwenty\";s:3:\"1.5\";}s:8:\"response\";a:0:{}s:9:\"no_update\";a:4:{s:10:\"foliopress\";a:6:{s:5:\"theme\";s:10:\"foliopress\";s:11:\"new_version\";s:5:\"1.1.5\";s:3:\"url\";s:40:\"https://wordpress.org/themes/foliopress/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/theme/foliopress.1.1.5.zip\";s:8:\"requires\";s:3:\"4.7\";s:12:\"requires_php\";s:3:\"5.2\";}s:14:\"twentynineteen\";a:6:{s:5:\"theme\";s:14:\"twentynineteen\";s:11:\"new_version\";s:3:\"1.7\";s:3:\"url\";s:44:\"https://wordpress.org/themes/twentynineteen/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/theme/twentynineteen.1.7.zip\";s:8:\"requires\";s:5:\"4.9.6\";s:12:\"requires_php\";s:5:\"5.2.4\";}s:15:\"twentyseventeen\";a:6:{s:5:\"theme\";s:15:\"twentyseventeen\";s:11:\"new_version\";s:3:\"2.4\";s:3:\"url\";s:45:\"https://wordpress.org/themes/twentyseventeen/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/theme/twentyseventeen.2.4.zip\";s:8:\"requires\";s:3:\"4.7\";s:12:\"requires_php\";s:5:\"5.2.4\";}s:12:\"twentytwenty\";a:6:{s:5:\"theme\";s:12:\"twentytwenty\";s:11:\"new_version\";s:3:\"1.5\";s:3:\"url\";s:42:\"https://wordpress.org/themes/twentytwenty/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/theme/twentytwenty.1.5.zip\";s:8:\"requires\";s:3:\"4.7\";s:12:\"requires_php\";s:5:\"5.2.4\";}}s:12:\"translations\";a:0:{}}','no'),(283,'wp_mail_smtp_initial_version','2.2.1','no'),(284,'wp_mail_smtp_version','2.2.1','no'),(285,'wp_mail_smtp','a:8:{s:4:\"mail\";a:6:{s:10:\"from_email\";s:22:\"me@willconnelly.com.au\";s:9:\"from_name\";s:13:\"Will Connelly\";s:6:\"mailer\";s:4:\"smtp\";s:11:\"return_path\";b:0;s:16:\"from_email_force\";b:1;s:15:\"from_name_force\";b:0;}s:4:\"smtp\";a:7:{s:7:\"autotls\";b:1;s:4:\"auth\";b:1;s:4:\"host\";s:16:\"smtp.zoho.com.au\";s:10:\"encryption\";s:3:\"tls\";s:4:\"port\";i:587;s:4:\"user\";s:22:\"me@willconnelly.com.au\";s:4:\"pass\";s:13:\"!1390827465zZ\";}s:7:\"smtpcom\";a:2:{s:7:\"api_key\";s:0:\"\";s:7:\"channel\";s:0:\"\";}s:11:\"pepipostapi\";a:1:{s:7:\"api_key\";s:0:\"\";}s:10:\"sendinblue\";a:1:{s:7:\"api_key\";s:0:\"\";}s:7:\"mailgun\";a:3:{s:7:\"api_key\";s:0:\"\";s:6:\"domain\";s:0:\"\";s:6:\"region\";s:2:\"US\";}s:8:\"sendgrid\";a:1:{s:7:\"api_key\";s:0:\"\";}s:5:\"gmail\";a:2:{s:9:\"client_id\";s:0:\"\";s:13:\"client_secret\";s:0:\"\";}}','no'),(286,'wp_mail_smtp_activated_time','1597668388','no'),(287,'action_scheduler_hybrid_store_demarkation','38','yes'),(288,'schema-ActionScheduler_StoreSchema','3.0.1597668389','yes'),(289,'schema-ActionScheduler_LoggerSchema','2.0.1597668389','yes'),(291,'wp_mail_smtp_migration_version','2','yes'),(294,'wp_mail_smtp_review_notice','a:2:{s:4:\"time\";i:1599089521;s:9:\"dismissed\";b:1;}','yes'),(295,'action_scheduler_lock_async-request-runner','1602428189','yes'),(296,'wp_mail_smtp_debug','a:0:{}','no'),(319,'action_scheduler_migration_status','complete','yes'),(517,'category_children','a:2:{i:5;a:1:{i:0;i:6;}i:7;a:1:{i:0;i:8;}}','yes'),(1237,'auto_update_plugins','a:1:{i:0;s:29:\"wp-mail-smtp/wp_mail_smtp.php\";}','no'),(1240,'wp_mail_smtp_notifications','a:4:{s:6:\"update\";i:1602383943;s:4:\"feed\";a:0:{}s:6:\"events\";a:0:{}s:9:\"dismissed\";a:0:{}}','yes'),(6585,'_site_transient_update_core','O:8:\"stdClass\":4:{s:7:\"updates\";a:1:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:6:\"latest\";s:8:\"download\";s:65:\"https://downloads.wordpress.org/release/en_AU/wordpress-5.5.1.zip\";s:6:\"locale\";s:5:\"en_AU\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:65:\"https://downloads.wordpress.org/release/en_AU/wordpress-5.5.1.zip\";s:10:\"no_content\";s:0:\"\";s:11:\"new_bundled\";s:0:\"\";s:7:\"partial\";s:0:\"\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:5:\"5.5.1\";s:7:\"version\";s:5:\"5.5.1\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.3\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1602732517;s:15:\"version_checked\";s:5:\"5.5.1\";s:12:\"translations\";a:0:{}}','no'),(6586,'_site_transient_update_plugins','O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1602732519;s:7:\"checked\";a:4:{s:19:\"akismet/akismet.php\";s:5:\"4.1.6\";s:36:\"contact-form-7/wp-contact-form-7.php\";s:5:\"5.2.2\";s:9:\"hello.php\";s:5:\"1.7.2\";s:29:\"wp-mail-smtp/wp_mail_smtp.php\";s:5:\"2.4.0\";}s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:4:{s:19:\"akismet/akismet.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:21:\"w.org/plugins/akismet\";s:4:\"slug\";s:7:\"akismet\";s:6:\"plugin\";s:19:\"akismet/akismet.php\";s:11:\"new_version\";s:5:\"4.1.6\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"package\";s:56:\"https://downloads.wordpress.org/plugin/akismet.4.1.6.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:59:\"https://ps.w.org/akismet/assets/icon-256x256.png?rev=969272\";s:2:\"1x\";s:59:\"https://ps.w.org/akismet/assets/icon-128x128.png?rev=969272\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:61:\"https://ps.w.org/akismet/assets/banner-772x250.jpg?rev=479904\";}s:11:\"banners_rtl\";a:0:{}}s:36:\"contact-form-7/wp-contact-form-7.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:28:\"w.org/plugins/contact-form-7\";s:4:\"slug\";s:14:\"contact-form-7\";s:6:\"plugin\";s:36:\"contact-form-7/wp-contact-form-7.php\";s:11:\"new_version\";s:5:\"5.2.2\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/contact-form-7/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/contact-form-7.5.2.2.zip\";s:5:\"icons\";a:3:{s:2:\"2x\";s:67:\"https://ps.w.org/contact-form-7/assets/icon-256x256.png?rev=2279696\";s:2:\"1x\";s:59:\"https://ps.w.org/contact-form-7/assets/icon.svg?rev=2339255\";s:3:\"svg\";s:59:\"https://ps.w.org/contact-form-7/assets/icon.svg?rev=2339255\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:69:\"https://ps.w.org/contact-form-7/assets/banner-1544x500.png?rev=860901\";s:2:\"1x\";s:68:\"https://ps.w.org/contact-form-7/assets/banner-772x250.png?rev=880427\";}s:11:\"banners_rtl\";a:0:{}}s:9:\"hello.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:25:\"w.org/plugins/hello-dolly\";s:4:\"slug\";s:11:\"hello-dolly\";s:6:\"plugin\";s:9:\"hello.php\";s:11:\"new_version\";s:5:\"1.7.2\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/hello-dolly/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/hello-dolly.1.7.2.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:64:\"https://ps.w.org/hello-dolly/assets/icon-256x256.jpg?rev=2052855\";s:2:\"1x\";s:64:\"https://ps.w.org/hello-dolly/assets/icon-128x128.jpg?rev=2052855\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:66:\"https://ps.w.org/hello-dolly/assets/banner-772x250.jpg?rev=2052855\";}s:11:\"banners_rtl\";a:0:{}}s:29:\"wp-mail-smtp/wp_mail_smtp.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:26:\"w.org/plugins/wp-mail-smtp\";s:4:\"slug\";s:12:\"wp-mail-smtp\";s:6:\"plugin\";s:29:\"wp-mail-smtp/wp_mail_smtp.php\";s:11:\"new_version\";s:5:\"2.4.0\";s:3:\"url\";s:43:\"https://wordpress.org/plugins/wp-mail-smtp/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/plugin/wp-mail-smtp.2.4.0.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:65:\"https://ps.w.org/wp-mail-smtp/assets/icon-256x256.png?rev=1755440\";s:2:\"1x\";s:65:\"https://ps.w.org/wp-mail-smtp/assets/icon-128x128.png?rev=1755440\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:68:\"https://ps.w.org/wp-mail-smtp/assets/banner-1544x500.png?rev=2120094\";s:2:\"1x\";s:67:\"https://ps.w.org/wp-mail-smtp/assets/banner-772x250.png?rev=2120094\";}s:11:\"banners_rtl\";a:0:{}}}}','no'),(9483,'_site_transient_timeout_browser_8b097414be15cb4733c4842580242b45','1602988530','no'),(9484,'_site_transient_browser_8b097414be15cb4733c4842580242b45','a:10:{s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"85.0.4183.121\";s:8:\"platform\";s:9:\"Macintosh\";s:10:\"update_url\";s:29:\"https://www.google.com/chrome\";s:7:\"img_src\";s:43:\"http://s.w.org/images/browsers/chrome.png?1\";s:11:\"img_src_ssl\";s:44:\"https://s.w.org/images/browsers/chrome.png?1\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}','no'),(9489,'_transient_is_multi_author','0','yes'),(9772,'_site_transient_timeout_theme_roots','1602734318','no'),(9773,'_site_transient_theme_roots','a:4:{s:10:\"foliopress\";s:7:\"/themes\";s:14:\"twentynineteen\";s:7:\"/themes\";s:15:\"twentyseventeen\";s:7:\"/themes\";s:12:\"twentytwenty\";s:7:\"/themes\";}','no');
/*!40000 ALTER TABLE `wp_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_postmeta`
--

DROP TABLE IF EXISTS `wp_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=200 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_postmeta`
--

LOCK TABLES `wp_postmeta` WRITE;
/*!40000 ALTER TABLE `wp_postmeta` DISABLE KEYS */;
INSERT INTO `wp_postmeta` VALUES (2,3,'_wp_page_template','default'),(4,5,'_customize_changeset_uuid','156dd3e8-1aac-4261-aa5c-b49b7edbbf78'),(11,5,'_edit_lock','1599089462:1'),(13,5,'_edit_last','1'),(14,5,'foliopress_sidebarlayout','meta-nosidebar'),(18,3,'_edit_lock','1597724624:1'),(23,13,'_menu_item_type','post_type'),(24,13,'_menu_item_menu_item_parent','0'),(25,13,'_menu_item_object_id','5'),(26,13,'_menu_item_object','page'),(27,13,'_menu_item_target',''),(28,13,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(29,13,'_menu_item_xfn',''),(30,13,'_menu_item_url',''),(31,13,'_menu_item_orphaned','1597638063'),(36,15,'_menu_item_type','post_type'),(37,15,'_menu_item_menu_item_parent','0'),(38,15,'_menu_item_object_id','5'),(39,15,'_menu_item_object','page'),(40,15,'_menu_item_target',''),(41,15,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(42,15,'_menu_item_xfn',''),(43,15,'_menu_item_url',''),(44,15,'_menu_item_orphaned','1597638092'),(45,16,'_menu_item_type','post_type'),(46,16,'_menu_item_menu_item_parent','0'),(47,16,'_menu_item_object_id','5'),(48,16,'_menu_item_object','page'),(49,16,'_menu_item_target',''),(50,16,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(51,16,'_menu_item_xfn',''),(52,16,'_menu_item_url',''),(53,16,'_menu_item_orphaned','1597638103'),(62,24,'_form','<div class=\"form-group\"><label>Full Name</label>\n[text* fullName class:form-control ]</div>\n<div class=\"form-group\"><label>Number</label>\n[text* number class:form-control ]</div>\n<div class=\"form-group\"><label>Email</label>\n[email* email class:form-control ]</div>\n<div class=\"form-group\"><label>Comment</label>\n[textarea* comment class:form-control ]</div>\n<div class=\"form-group\">[submit \"Send\"]</div>'),(63,24,'_mail','a:9:{s:6:\"active\";b:1;s:7:\"subject\";s:19:\"willconnelly.com.au\";s:6:\"sender\";s:40:\"[fullName] <contact@willconnelly.com.au>\";s:9:\"recipient\";s:26:\"connelly.william@gmail.com\";s:4:\"body\";s:154:\"From: [fullName] \nEmail: [email]\nPhone: [number]\n\nMessage Body:\n[comment]\n\n-- \nThis email was sent from a contact form on WC (https://willconnelly.com.au)\";s:18:\"additional_headers\";s:17:\"Reply-To: [email]\";s:11:\"attachments\";s:0:\"\";s:8:\"use_html\";b:0;s:13:\"exclude_blank\";b:0;}'),(64,24,'_mail_2','a:9:{s:6:\"active\";b:0;s:7:\"subject\";s:19:\"WC \"[your-subject]\"\";s:6:\"sender\";s:34:\"WC <wordpress@willconnelly.com.au>\";s:9:\"recipient\";s:12:\"[your-email]\";s:4:\"body\";s:109:\"Message Body:\n[your-message]\n\n-- \nThis email was sent from a contact form on WC (https://willconnelly.com.au)\";s:18:\"additional_headers\";s:36:\"Reply-To: connelly.william@gmail.com\";s:11:\"attachments\";s:0:\"\";s:8:\"use_html\";b:0;s:13:\"exclude_blank\";b:0;}'),(65,24,'_messages','a:22:{s:12:\"mail_sent_ok\";s:58:\"Thanks for getting in touch! I\'ll get back to you shortly.\";s:12:\"mail_sent_ng\";s:71:\"There was an error trying to send your message. Please try again later.\";s:16:\"validation_error\";s:61:\"One or more fields have an error. Please check and try again.\";s:4:\"spam\";s:71:\"There was an error trying to send your message. Please try again later.\";s:12:\"accept_terms\";s:69:\"You must accept the terms and conditions before sending your message.\";s:16:\"invalid_required\";s:22:\"The field is required.\";s:16:\"invalid_too_long\";s:22:\"The field is too long.\";s:17:\"invalid_too_short\";s:23:\"The field is too short.\";s:12:\"invalid_date\";s:29:\"The date format is incorrect.\";s:14:\"date_too_early\";s:44:\"The date is before the earliest one allowed.\";s:13:\"date_too_late\";s:41:\"The date is after the latest one allowed.\";s:13:\"upload_failed\";s:46:\"There was an unknown error uploading the file.\";s:24:\"upload_file_type_invalid\";s:49:\"You are not allowed to upload files of this type.\";s:21:\"upload_file_too_large\";s:20:\"The file is too big.\";s:23:\"upload_failed_php_error\";s:38:\"There was an error uploading the file.\";s:14:\"invalid_number\";s:29:\"The number format is invalid.\";s:16:\"number_too_small\";s:47:\"The number is smaller than the minimum allowed.\";s:16:\"number_too_large\";s:46:\"The number is larger than the maximum allowed.\";s:23:\"quiz_answer_not_correct\";s:36:\"The answer to the quiz is incorrect.\";s:13:\"invalid_email\";s:37:\"The email address entered is invalid.\";s:11:\"invalid_url\";s:19:\"The URL is invalid.\";s:11:\"invalid_tel\";s:32:\"The telephone number is invalid.\";}'),(66,24,'_additional_settings',''),(67,24,'_locale','en_AU'),(70,27,'_menu_item_type','post_type'),(71,27,'_menu_item_menu_item_parent','0'),(72,27,'_menu_item_object_id','5'),(73,27,'_menu_item_object','page'),(74,27,'_menu_item_target',''),(75,27,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(76,27,'_menu_item_xfn',''),(77,27,'_menu_item_url',''),(78,28,'_menu_item_type','custom'),(79,28,'_menu_item_menu_item_parent','0'),(80,28,'_menu_item_object_id','28'),(81,28,'_menu_item_object','custom'),(82,28,'_menu_item_target',''),(83,28,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(84,28,'_menu_item_xfn',''),(85,28,'_menu_item_url','https://willconnelly.com.au'),(97,32,'_edit_lock','1597668444:1'),(98,32,'_edit_last','1'),(99,32,'foliopress_sidebarlayout','default'),(108,40,'_edit_lock','1598070740:1'),(109,40,'_edit_last','1'),(110,40,'foliopress_sidebarlayout','default'),(120,50,'_edit_lock','1597897971:1'),(121,50,'_edit_last','1'),(122,50,'foliopress_sidebarlayout','default'),(147,61,'_edit_lock','1597812812:1'),(148,61,'_edit_last','1'),(149,61,'foliopress_sidebarlayout','default'),(156,73,'_wp_attached_file','2020/08/Screen-Shot-2020-08-19-at-12.35.53-pm.png'),(157,73,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1533;s:6:\"height\";i:502;s:4:\"file\";s:49:\"2020/08/Screen-Shot-2020-08-19-at-12.35.53-pm.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(158,74,'_wp_attached_file','2020/08/Screen-Shot-2020-08-19-at-12.37.19-pm.png'),(159,74,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:369;s:6:\"height\";i:550;s:4:\"file\";s:49:\"2020/08/Screen-Shot-2020-08-19-at-12.37.19-pm.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(162,76,'_wp_attached_file','2020/08/Screen-Shot-2020-08-19-at-12.38.58-pm.png'),(163,76,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:67;s:6:\"height\";i:30;s:4:\"file\";s:49:\"2020/08/Screen-Shot-2020-08-19-at-12.38.58-pm.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(174,50,'_wp_old_date','2020-08-18'),(177,40,'_wp_old_date','2020-08-18'),(188,87,'_wp_attached_file','2020/08/me-2.png'),(189,87,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:360;s:6:\"height\";i:360;s:4:\"file\";s:16:\"2020/08/me-2.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
/*!40000 ALTER TABLE `wp_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_posts`
--

DROP TABLE IF EXISTS `wp_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT 0,
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_title` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_excerpt` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `to_ping` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `pinged` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT 0,
  `guid` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT 0,
  `post_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`(191)),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=99 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_posts`
--

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (3,1,'2020-08-15 14:51:14','2020-08-15 14:51:14','<!-- wp:heading --><h2>Who we are</h2><!-- /wp:heading --><!-- wp:paragraph --><p>Our website address is: http://ec2-52-63-108-194.ap-southeast-2.compute.amazonaws.com.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>What personal data we collect and why we collect it</h2><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>Comments</h3><!-- /wp:heading --><!-- wp:paragraph --><p>When visitors leave comments on the site we collect the data shown in the comments form, and also the visitor&#8217;s IP address and browser user agent string to help spam detection.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>An anonymised string created from your email address (also called a hash) may be provided to the Gravatar service to see if you are using it. The Gravatar service privacy policy is available here: https://automattic.com/privacy/. After approval of your comment, your profile picture is visible to the public in the context of your comment.</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>Media</h3><!-- /wp:heading --><!-- wp:paragraph --><p>If you upload images to the website, you should avoid uploading images with embedded location data (EXIF GPS) included. Visitors to the website can download and extract any location data from images on the website.</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>Contact forms</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>Cookies</h3><!-- /wp:heading --><!-- wp:paragraph --><p>If you leave a comment on our site you may opt-in to saving your name, email address and website in cookies. These are for your convenience so that you do not have to fill in your details again when you leave another comment. These cookies will last for one year.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>If you visit our login page, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>When you log in, we will also set up several cookies to save your login information and your screen display choices. Login cookies last for two days, and screen options cookies last for a year. If you select &quot;Remember Me&quot;, your login will persist for two weeks. If you log out of your account, the login cookies will be removed.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>If you edit or publish an article, an additional cookie will be saved in your browser. This cookie includes no personal data and simply indicates the post ID of the article you just edited. It expires after 1 day.</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>Embedded content from other websites</h3><!-- /wp:heading --><!-- wp:paragraph --><p>Articles on this site may include embedded content (e.g. videos, images, articles, etc.). Embedded content from other websites behaves in the exact same way as if the visitor has visited the other website.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>These websites may collect data about you, use cookies, embed additional third-party tracking, and monitor your interaction with that embedded content, including tracking your interaction with the embedded content if you have an account and are logged in to that website.</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>Analytics</h3><!-- /wp:heading --><!-- wp:heading --><h2>Who we share your data with</h2><!-- /wp:heading --><!-- wp:heading --><h2>How long we retain your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>If you leave a comment, the comment and its metadata are retained indefinitely. This is so we can recognise and approve any follow-up comments automatically instead of holding them in a moderation queue.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>For users that register on our website (if any), we also store the personal information they provide in their user profile. All users can see, edit, or delete their personal information at any time (except they cannot change their username). Website administrators can also see and edit that information.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>What rights you have over your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>If you have an account on this site, or have left comments, you can request to receive an exported file of the personal data we hold about you, including any data you have provided to us. You can also request that we erase any personal data we hold about you. This does not include any data we are obliged to keep for administrative, legal, or security purposes.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Where we send your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>Visitor comments may be checked through an automated spam detection service.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Your contact information</h2><!-- /wp:heading --><!-- wp:heading --><h2>Additional information</h2><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>How we protect your data</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>What data breach procedures we have in place</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>What third parties we receive data from</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>What automated decision making and/or profiling we do with user data</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>Industry regulatory disclosure requirements</h3><!-- /wp:heading -->','Privacy Policy','','draft','closed','open','','privacy-policy','','','2020-08-15 14:51:14','2020-08-15 14:51:14','',0,'http://ec2-52-63-108-194.ap-southeast-2.compute.amazonaws.com/?page_id=3',0,'page','',0),(5,1,'2020-08-17 12:16:02','2020-08-17 04:16:02','<!-- wp:quote {\"className\":\"is-style-default\"} -->\n<blockquote class=\"wp-block-quote is-style-default\"><p>Hello, what can I do for you?</p></blockquote>\n<!-- /wp:quote -->\n\n<p>[contact-form-7 id=\"24\" title=\"Contact form 1\"]</p>','Contact','','publish','closed','closed','','william-connelly','','','2020-09-03 07:31:01','2020-09-02 23:31:01','',0,'https://willconnelly.com.au/?page_id=5',0,'page','',0),(8,1,'2020-08-17 12:16:02','2020-08-17 04:16:02','','William Connelly','','inherit','closed','closed','','5-revision-v1','','','2020-08-17 12:16:02','2020-08-17 04:16:02','',5,'https://willconnelly.com.au/index.php/2020/08/17/5-revision-v1/',0,'revision','',0),(13,1,'2020-08-17 12:21:03','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2020-08-17 12:21:03','0000-00-00 00:00:00','',0,'https://willconnelly.com.au/?p=13',1,'nav_menu_item','',0),(15,1,'2020-08-17 12:21:32','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2020-08-17 12:21:32','0000-00-00 00:00:00','',0,'https://willconnelly.com.au/?p=15',1,'nav_menu_item','',0),(16,1,'2020-08-17 12:21:42','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2020-08-17 12:21:42','0000-00-00 00:00:00','',0,'https://willconnelly.com.au/?p=16',1,'nav_menu_item','',0),(22,1,'2020-08-17 12:30:58','2020-08-17 04:30:58','<div class=\"form-group\"><label>Name</label>\n[text* name class:form-control ]</div>\n<div class=\"form-group\"><label>Number</label>\n[text* number class:form-control ]</div>\n<div class=\"form-group\"><label>Email</label>\n[email* email class:form-control ]</div>\n<div class=\"form-group\"><label>Comment</label>\n[textarea* comment class:form-control ]</div>\n<div class=\"form-group\">[submit \"Send\"]</div>','Contact','','inherit','closed','closed','','5-revision-v1','','','2020-08-17 12:30:58','2020-08-17 04:30:58','',5,'https://willconnelly.com.au/index.php/2020/08/17/5-revision-v1/',0,'revision','',0),(24,1,'2020-08-17 12:31:23','2020-08-17 04:31:23','<div class=\"form-group\"><label>Full Name</label>\r\n[text* fullName class:form-control ]</div>\r\n<div class=\"form-group\"><label>Number</label>\r\n[text* number class:form-control ]</div>\r\n<div class=\"form-group\"><label>Email</label>\r\n[email* email class:form-control ]</div>\r\n<div class=\"form-group\"><label>Comment</label>\r\n[textarea* comment class:form-control ]</div>\r\n<div class=\"form-group\">[submit \"Send\"]</div>\n1\nwillconnelly.com.au\n[fullName] <contact@willconnelly.com.au>\nconnelly.william@gmail.com\nFrom: [fullName] \r\nEmail: [email]\r\nPhone: [number]\r\n\r\nMessage Body:\r\n[comment]\r\n\r\n-- \r\nThis email was sent from a contact form on WC (https://willconnelly.com.au)\nReply-To: [email]\n\n\n\n\nWC \"[your-subject]\"\nWC <wordpress@willconnelly.com.au>\n[your-email]\nMessage Body:\r\n[your-message]\r\n\r\n-- \r\nThis email was sent from a contact form on WC (https://willconnelly.com.au)\nReply-To: connelly.william@gmail.com\n\n\n\nThanks for getting in touch! I\'ll get back to you shortly.\nThere was an error trying to send your message. Please try again later.\nOne or more fields have an error. Please check and try again.\nThere was an error trying to send your message. Please try again later.\nYou must accept the terms and conditions before sending your message.\nThe field is required.\nThe field is too long.\nThe field is too short.\nThe date format is incorrect.\nThe date is before the earliest one allowed.\nThe date is after the latest one allowed.\nThere was an unknown error uploading the file.\nYou are not allowed to upload files of this type.\nThe file is too big.\nThere was an error uploading the file.\nThe number format is invalid.\nThe number is smaller than the minimum allowed.\nThe number is larger than the maximum allowed.\nThe answer to the quiz is incorrect.\nThe email address entered is invalid.\nThe URL is invalid.\nThe telephone number is invalid.','Contact form 1','','publish','closed','closed','','contact-form-1','','','2020-08-20 12:34:00','2020-08-20 04:34:00','',0,'https://willconnelly.com.au/?post_type=wpcf7_contact_form&#038;p=24',0,'wpcf7_contact_form','',0),(25,1,'2020-08-17 12:34:20','2020-08-17 04:34:20','[contact-form-7 id=\"24\" title=\"Contact form 1\"]','Contact','','inherit','closed','closed','','5-revision-v1','','','2020-08-17 12:34:20','2020-08-17 04:34:20','',5,'https://willconnelly.com.au/index.php/2020/08/17/5-revision-v1/',0,'revision','',0),(27,1,'2020-08-17 12:35:52','2020-08-17 04:35:52',' ','','','publish','closed','closed','','27','','','2020-08-17 12:35:52','2020-08-17 04:35:52','',0,'https://willconnelly.com.au/index.php/2020/08/17/27/',2,'nav_menu_item','',0),(28,1,'2020-08-17 12:35:52','2020-08-17 04:35:52','','Home','','publish','closed','closed','','home','','','2020-08-17 12:35:52','2020-08-17 04:35:52','',0,'https://willconnelly.com.au/index.php/2020/08/17/home/',1,'nav_menu_item','',0),(32,1,'2020-08-17 19:06:30','0000-00-00 00:00:00','<!-- wp:media-text {\"mediaId\":34,\"mediaLink\":\"https://willconnelly.com.au/?attachment_id=34\",\"mediaType\":\"image\",\"mediaWidth\":40,\"imageFill\":false} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile\" style=\"grid-template-columns:40% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/design.png\" alt=\"\" class=\"wp-image-34\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph {\"align\":\"right\"} -->\n<p class=\"has-text-align-right\">Build a modern mobile applications that fit your company\'s design language using the most modern and robust frameworks</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\"/>\n<!-- /wp:separator -->\n\n<!-- wp:media-text {\"mediaPosition\":\"right\",\"mediaId\":34,\"mediaLink\":\"https://willconnelly.com.au/?attachment_id=34\",\"mediaType\":\"image\",\"mediaWidth\":39,\"imageFill\":false} -->\n<div class=\"wp-block-media-text alignwide has-media-on-the-right is-stacked-on-mobile\" style=\"grid-template-columns:auto 39%\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/design.png\" alt=\"\" class=\"wp-image-34\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph -->\n<p>A simple and feature rich administrative dashboard keeps you business in focus</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\"/>\n<!-- /wp:separator -->\n\n<!-- wp:media-text {\"mediaId\":34,\"mediaLink\":\"https://willconnelly.com.au/?attachment_id=34\",\"mediaType\":\"image\"} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/design.png\" alt=\"\" class=\"wp-image-34\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph -->\n<p>Design your own hardware based on your needs</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','William Connelly','','draft','closed','closed','','','','','2020-08-17 19:06:30','2020-08-17 11:06:30','',0,'https://willconnelly.com.au/?page_id=32',0,'page','',0),(33,1,'2020-08-17 18:39:39','2020-08-17 10:39:39','<!-- wp:media-text {\"mediaId\":7,\"mediaLink\":\"https://willconnelly.com.au/unnamed/\",\"mediaType\":\"image\"} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/unnamed.png\" alt=\"me\" class=\"wp-image-7\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph -->\n<p>Build a modern mobile application that fits your company\'s design language using the most modern and robust frameworks</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->','William Connelly','','inherit','closed','closed','','32-revision-v1','','','2020-08-17 18:39:39','2020-08-17 10:39:39','',32,'https://willconnelly.com.au/index.php/2020/08/17/32-revision-v1/',0,'revision','',0),(35,1,'2020-08-17 19:04:11','2020-08-17 11:04:11','<!-- wp:media-text {\"mediaId\":34,\"mediaLink\":\"https://willconnelly.com.au/?attachment_id=34\",\"mediaType\":\"image\",\"mediaWidth\":40,\"imageFill\":true} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile is-image-fill\" style=\"grid-template-columns:40% auto\"><figure class=\"wp-block-media-text__media\" style=\"background-image:url(https://willconnelly.com.au/wp-content/uploads/2020/08/design.png);background-position:50% 50%\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/design.png\" alt=\"\" class=\"wp-image-34\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph -->\n<p>Build a modern mobile application that fits your company\'s design language using the most modern and robust frameworks</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\"/>\n<!-- /wp:separator -->\n\n<!-- wp:media-text {\"mediaPosition\":\"right\",\"mediaId\":34,\"mediaLink\":\"https://willconnelly.com.au/?attachment_id=34\",\"mediaType\":\"image\",\"mediaWidth\":39,\"imageFill\":true} -->\n<div class=\"wp-block-media-text alignwide has-media-on-the-right is-stacked-on-mobile is-image-fill\" style=\"grid-template-columns:auto 39%\"><figure class=\"wp-block-media-text__media\" style=\"background-image:url(https://willconnelly.com.au/wp-content/uploads/2020/08/design.png);background-position:50% 50%\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/design.png\" alt=\"\" class=\"wp-image-34\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph -->\n<p>A simple and feature rich administrative dashboard keeps you business in focus</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\"/>\n<!-- /wp:separator -->\n\n<!-- wp:media-text -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile\"><figure class=\"wp-block-media-text__media\"></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph {\"placeholder\":\"Content…\",\"fontSize\":\"large\"} -->\n<p class=\"has-large-font-size\"></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','William Connelly','','inherit','closed','closed','','32-revision-v1','','','2020-08-17 19:04:11','2020-08-17 11:04:11','',32,'https://willconnelly.com.au/index.php/2020/08/17/32-revision-v1/',0,'revision','',0),(36,1,'2020-08-17 19:04:47','2020-08-17 11:04:47','<!-- wp:media-text {\"mediaId\":34,\"mediaLink\":\"https://willconnelly.com.au/?attachment_id=34\",\"mediaType\":\"image\",\"mediaWidth\":40,\"imageFill\":false} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile\" style=\"grid-template-columns:40% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/design.png\" alt=\"\" class=\"wp-image-34\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph {\"align\":\"right\"} -->\n<p class=\"has-text-align-right\">Build a modern mobile application that fits your company\'s design language using the most modern and robust frameworks</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\"/>\n<!-- /wp:separator -->\n\n<!-- wp:media-text {\"mediaPosition\":\"right\",\"mediaId\":34,\"mediaLink\":\"https://willconnelly.com.au/?attachment_id=34\",\"mediaType\":\"image\",\"mediaWidth\":39,\"imageFill\":false} -->\n<div class=\"wp-block-media-text alignwide has-media-on-the-right is-stacked-on-mobile\" style=\"grid-template-columns:auto 39%\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/design.png\" alt=\"\" class=\"wp-image-34\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph -->\n<p>A simple and feature rich administrative dashboard keeps you business in focus</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\"/>\n<!-- /wp:separator -->\n\n<!-- wp:media-text -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile\"><figure class=\"wp-block-media-text__media\"></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph {\"placeholder\":\"Content…\",\"fontSize\":\"large\"} -->\n<p class=\"has-large-font-size\"></p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','William Connelly','','inherit','closed','closed','','32-revision-v1','','','2020-08-17 19:04:47','2020-08-17 11:04:47','',32,'https://willconnelly.com.au/index.php/2020/08/17/32-revision-v1/',0,'revision','',0),(37,1,'2020-08-17 19:06:01','2020-08-17 11:06:01','<!-- wp:media-text {\"mediaId\":34,\"mediaLink\":\"https://willconnelly.com.au/?attachment_id=34\",\"mediaType\":\"image\",\"mediaWidth\":40,\"imageFill\":false} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile\" style=\"grid-template-columns:40% auto\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/design.png\" alt=\"\" class=\"wp-image-34\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph {\"align\":\"right\"} -->\n<p class=\"has-text-align-right\">Build a modern mobile applications that fit your company\'s design language using the most modern and robust frameworks</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\"/>\n<!-- /wp:separator -->\n\n<!-- wp:media-text {\"mediaPosition\":\"right\",\"mediaId\":34,\"mediaLink\":\"https://willconnelly.com.au/?attachment_id=34\",\"mediaType\":\"image\",\"mediaWidth\":39,\"imageFill\":false} -->\n<div class=\"wp-block-media-text alignwide has-media-on-the-right is-stacked-on-mobile\" style=\"grid-template-columns:auto 39%\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/design.png\" alt=\"\" class=\"wp-image-34\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph -->\n<p>A simple and feature rich administrative dashboard keeps you business in focus</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\"/>\n<!-- /wp:separator -->\n\n<!-- wp:media-text {\"mediaId\":34,\"mediaLink\":\"https://willconnelly.com.au/?attachment_id=34\",\"mediaType\":\"image\"} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/design.png\" alt=\"\" class=\"wp-image-34\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph -->\n<p>Design your own hardware based on your needs</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','William Connelly','','inherit','closed','closed','','32-revision-v1','','','2020-08-17 19:06:01','2020-08-17 11:06:01','',32,'https://willconnelly.com.au/index.php/2020/08/17/32-revision-v1/',0,'revision','',0),(40,1,'2020-08-04 12:13:32','2020-08-04 04:13:32','<!-- wp:paragraph -->\n<p>Creating a button in iOS is simple but if you want a more responsive button like the ones Apple Uses in their app store, you need to get creative with gestures.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Feel free to reproduce and implement this gist however you see fit. <a href=\"https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c\">https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong>UILongPressGestureRecognizer</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to be notified when the user first presses on the screen you must look into the state variable of&nbsp;UILongPressGestureRecognizer. By default though, there is a delay before&nbsp;UIGestureRecognizer.State.began&nbsp;is called. You can easily reduce this though by settings delay to 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>let longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(onLongPressRecognised(_:)))\n\nlongPressGesture.minimumPressDuration = 0</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>Delegate</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The above code works great in a simple interface but if you nest these buttons in a&nbsp;UIScrollView&nbsp;the gesture absorbs all touches and prevents scrolling. A simple workaround is not to block other&nbsp;UIGesturesRecognizer‘s (which&nbsp;UIScrollView&nbsp;uses under-the-hood to manage scrolling) by overriding the delegate on the&nbsp;UILongPressGestureRecognizer&nbsp;we created above and implementing the following delegate method:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Button: UIView, UIGestureRecognizerDelegate {\n\nlongPressGesture.delegate = self\n\nfunc gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {\n    return true\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>By returning true we’re allowing any touches beneath our&nbsp;UILongPressGestureRecognizer&nbsp;to still be called.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Smoothing Animations</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We’ve got our button animating now as soon as the user begins a touch down, we’re not stopping our screen from scrolling but now our we can’t stop our button&nbsp;.ended&nbsp;notification from being called. To fix this we simply guard against the function being called after the user begins to scroll:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>var safeArea: CGFloat { return 5.0 }\n\n@objc func onLongPressRecognised(_ sender: UILongPressGestureRecognizer) {\n           \nswitch sender.state {\n        \ncase .began:\n            \n    self.initialPos = sender.location(in: parent)\n    UIView.animate(withDuration: 0.2, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .init(scaleX: 0.95, y: 0.95)\n    })\n\ncase .changed:\n    let loc = sender.location(in: parent)\n    \n    if loc.x &lt; (initialPos.x - safeArea)\n                || loc.x > (initialPos.x + safeArea)\n                || loc.y &lt; (initialPos.y - safeArea)\n                || loc.y > (initialPos.y + safeArea) {\n                self.isCancelled = true\n                sender.state = .ended\n            }\ncase .ended:\n    UIView.animate(withDuration: 0.3, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .identity\n    })\n    if isCancelled { \n        isCancelled = false\n    } else {\n        .. // do stuff\n    }\n}}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can see I’ve used a safe area here to make the cancellation of this gesture less sensitive and allow a better user experience.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Conclusion</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Smooth button animations create an entertaining, interactive user experience. Although Apple loves to use these animations in their apps, they don’t make it readily known to developers how they can implement similar features.&nbsp;UILongPressGestureRecognizer&nbsp;is a very flexible class with a lot of room for experimentation and creativity in creating a rich user interface.</p>\n<!-- /wp:paragraph -->','Animating Views With UILongPressGestureRecognizer','','publish','open','open','','animated-button-presses','','','2020-08-22 12:32:17','2020-08-22 04:32:17','',0,'https://willconnelly.com.au/?p=40',0,'post','',0),(41,1,'2020-08-18 12:03:10','2020-08-18 04:03:10','<!-- wp:paragraph -->\n<p>Creating a button in iOS is simple but if you want a more responsive button like the ones Apple Uses in their app store, you need to get creative with gestures.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Feel free to reproduce and implement this gist however you see fit. <a href=\"https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c\">https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>UILongPressGestureRecognizer</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to be notified when the user first presses on the screen you must look into the state variable of UILongPressGestureRecognizer. By default though, there is a delay before UIGestureRecognizer.State.began is called. You can easily reduce this though by settings delay to 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\n\rlet longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(onLongPressRecognised(_:)))\nlongPressGesture.minimumPressDuration = 0\r\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>Delegate</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The above code works great in a simple interface but if you nest these buttons in a UIScrollView the gesture absorbs all touches and prevents scrolling. A simple workaround is not to block other UIGesturesRecognizer‘s (which UIScrollView uses under-the-hood to manage scrolling) by overriding the delegate on the UILongPressGestureRecognizer we created above and implementing the following delegate method: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Button: UIView, UIGestureRecognizerDelegate {...\n\r...\n\rlongPressGesture.delegate = self\r...\n\rfunc gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {\r    return true\r}\n</code></pre>\n<!-- /wp:code -->','Animated Button Presses','','inherit','closed','closed','','40-revision-v1','','','2020-08-18 12:03:10','2020-08-18 04:03:10','',40,'https://willconnelly.com.au/index.php/2020/08/18/40-revision-v1/',0,'revision','',0),(42,1,'2020-08-18 12:06:38','2020-08-18 04:06:38','<!-- wp:paragraph -->\n<p>Creating a button in iOS is simple but if you want a more responsive button like the ones Apple Uses in their app store, you need to get creative with gestures.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Feel free to reproduce and implement this gist however you see fit. <a href=\"https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c\">https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>UILongPressGestureRecognizer</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to be notified when the user first presses on the screen you must look into the state variable of UILongPressGestureRecognizer. By default though, there is a delay before UIGestureRecognizer.State.began is called. You can easily reduce this though by settings delay to 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\n\rlet longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(onLongPressRecognised(_:)))\nlongPressGesture.minimumPressDuration = 0\r\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>Delegate</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The above code works great in a simple interface but if you nest these buttons in a UIScrollView the gesture absorbs all touches and prevents scrolling. A simple workaround is not to block other UIGesturesRecognizer‘s (which UIScrollView uses under-the-hood to manage scrolling) by overriding the delegate on the UILongPressGestureRecognizer we created above and implementing the following delegate method: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Button: UIView, UIGestureRecognizerDelegate {\n\r\n\rlongPressGesture.delegate = self\n\n\rfunc gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {\r    return true\r}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>By returning true we’re allowing any touches beneath our UILongPressGestureRecognizer to still be called.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Smoothing Animations</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We’ve got our button animating now as soon as the user begins a touch down, we’re not stopping our screen from scrolling but now our we can’t stop our button .ended notification from being called. To fix this we simply guard against the function being called after the user begins to scroll:</p>\n<!-- /wp:paragraph -->','Animated Button Presses','','inherit','closed','closed','','40-revision-v1','','','2020-08-18 12:06:38','2020-08-18 04:06:38','',40,'https://willconnelly.com.au/index.php/2020/08/18/40-revision-v1/',0,'revision','',0),(43,1,'2020-08-18 12:10:42','2020-08-18 04:10:42','<!-- wp:paragraph -->\n<p>Creating a button in iOS is simple but if you want a more responsive button like the ones Apple Uses in their app store, you need to get creative with gestures.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Feel free to reproduce and implement this gist however you see fit. <a href=\"https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c\">https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>UILongPressGestureRecognizer</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to be notified when the user first presses on the screen you must look into the state variable of&nbsp;UILongPressGestureRecognizer. By default though, there is a delay before&nbsp;UIGestureRecognizer.State.began&nbsp;is called. You can easily reduce this though by settings delay to 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\n\nlet longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(onLongPressRecognised(_:)))\nlongPressGesture.minimumPressDuration = 0\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>Delegate</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The above code works great in a simple interface but if you nest these buttons in a&nbsp;UIScrollView&nbsp;the gesture absorbs all touches and prevents scrolling. A simple workaround is not to block other&nbsp;UIGesturesRecognizer‘s (which&nbsp;UIScrollView&nbsp;uses under-the-hood to manage scrolling) by overriding the delegate on the&nbsp;UILongPressGestureRecognizer&nbsp;we created above and implementing the following delegate method:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Button: UIView, UIGestureRecognizerDelegate {\n\n\nlongPressGesture.delegate = self\n\n\nfunc gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {\n    return true\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>By returning true we’re allowing any touches beneath our&nbsp;UILongPressGestureRecognizer&nbsp;to still be called.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Smoothing Animations</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We’ve got our button animating now as soon as the user begins a touch down, we’re not stopping our screen from scrolling but now our we can’t stop our button&nbsp;.ended&nbsp;notification from being called. To fix this we simply guard against the function being called after the user begins to scroll:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>var safeArea: CGFloat { return 5.0 }\n\n@objc func onLongPressRecognised(_ sender: UILongPressGestureRecognizer) {\n        \n    \nswitch sender.state {\n        \n...\ncase .began:\n            \n    self.initialPos = sender.location(in: parent)\n    UIView.animate(withDuration: 0.2, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .init(scaleX: 0.95, y: 0.95)\n    })\n\ncase .changed:\n    let loc = sender.location(in: parent)\n    \n    if loc.x &lt; (initialPos.x - safeArea)\n                || loc.x > (initialPos.x + safeArea)\n                || loc.y &lt; (initialPos.y - safeArea)\n                || loc.y > (initialPos.y + safeArea) {\n                self.isCancelled = true\n                sender.state = .ended\n            }\ncase .ended:\n    UIView.animate(withDuration: 0.3, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .identity\n    })\n    if isCancelled { \n        isCancelled = false\n    } else {\n        .. // do stuff\n    }\n}}\n</code></pre>\n<!-- /wp:code -->','Animated Button Presses','','inherit','closed','closed','','40-revision-v1','','','2020-08-18 12:10:42','2020-08-18 04:10:42','',40,'https://willconnelly.com.au/index.php/2020/08/18/40-revision-v1/',0,'revision','',0),(44,1,'2020-08-18 12:11:37','2020-08-18 04:11:37','<!-- wp:paragraph -->\n<p>Creating a button in iOS is simple but if you want a more responsive button like the ones Apple Uses in their app store, you need to get creative with gestures.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Feel free to reproduce and implement this gist however you see fit. <a href=\"https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c\">https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>UILongPressGestureRecognizer</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to be notified when the user first presses on the screen you must look into the state variable of&nbsp;UILongPressGestureRecognizer. By default though, there is a delay before&nbsp;UIGestureRecognizer.State.began&nbsp;is called. You can easily reduce this though by settings delay to 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\n\nlet longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(onLongPressRecognised(_:)))\nlongPressGesture.minimumPressDuration = 0\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>Delegate</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The above code works great in a simple interface but if you nest these buttons in a&nbsp;UIScrollView&nbsp;the gesture absorbs all touches and prevents scrolling. A simple workaround is not to block other&nbsp;UIGesturesRecognizer‘s (which&nbsp;UIScrollView&nbsp;uses under-the-hood to manage scrolling) by overriding the delegate on the&nbsp;UILongPressGestureRecognizer&nbsp;we created above and implementing the following delegate method:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Button: UIView, UIGestureRecognizerDelegate {\n\n\nlongPressGesture.delegate = self\n\n\nfunc gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {\n    return true\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>By returning true we’re allowing any touches beneath our&nbsp;UILongPressGestureRecognizer&nbsp;to still be called.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Smoothing Animations</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We’ve got our button animating now as soon as the user begins a touch down, we’re not stopping our screen from scrolling but now our we can’t stop our button&nbsp;.ended&nbsp;notification from being called. To fix this we simply guard against the function being called after the user begins to scroll:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>var safeArea: CGFloat { return 5.0 }\n\n@objc func onLongPressRecognised(_ sender: UILongPressGestureRecognizer) {\n        \n    \nswitch sender.state {\n        \n...\ncase .began:\n            \n    self.initialPos = sender.location(in: parent)\n    UIView.animate(withDuration: 0.2, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .init(scaleX: 0.95, y: 0.95)\n    })\n\ncase .changed:\n    let loc = sender.location(in: parent)\n    \n    if loc.x &lt; (initialPos.x - safeArea)\n                || loc.x > (initialPos.x + safeArea)\n                || loc.y &lt; (initialPos.y - safeArea)\n                || loc.y > (initialPos.y + safeArea) {\n                self.isCancelled = true\n                sender.state = .ended\n            }\ncase .ended:\n    UIView.animate(withDuration: 0.3, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .identity\n    })\n    if isCancelled { \n        isCancelled = false\n    } else {\n        .. // do stuff\n    }\n}}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can see I’ve used a safe area here to make the cancellation of this gesture less sensitive and allow a better user experience.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Conclusion</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Smooth button animations create an entertaining, interactive user experience. Although Apple loves to use these animations in their apps, they don’t make it readily known to developers how they can implement similar features. UILongPressGestureRecognizer is a very flexible class with a lot of room for experimentation and creativity in creating a rich user interface.</p>\n<!-- /wp:paragraph -->','Animated Button Presses','','inherit','closed','closed','','40-revision-v1','','','2020-08-18 12:11:37','2020-08-18 04:11:37','',40,'https://willconnelly.com.au/index.php/2020/08/18/40-revision-v1/',0,'revision','',0),(45,1,'2020-08-18 12:12:09','2020-08-18 04:12:09','<!-- wp:paragraph -->\n<p>Creating a button in iOS is simple but if you want a more responsive button like the ones Apple Uses in their app store, you need to get creative with gestures.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Feel free to reproduce and implement this gist however you see fit. <a href=\"https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c\">https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>UILongPressGestureRecognizer</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to be notified when the user first presses on the screen you must look into the state variable of&nbsp;UILongPressGestureRecognizer. By default though, there is a delay before&nbsp;UIGestureRecognizer.State.began&nbsp;is called. You can easily reduce this though by settings delay to 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\n\nlet longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(onLongPressRecognised(_:)))\nlongPressGesture.minimumPressDuration = 0\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>Delegate</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The above code works great in a simple interface but if you nest these buttons in a&nbsp;UIScrollView&nbsp;the gesture absorbs all touches and prevents scrolling. A simple workaround is not to block other&nbsp;UIGesturesRecognizer‘s (which&nbsp;UIScrollView&nbsp;uses under-the-hood to manage scrolling) by overriding the delegate on the&nbsp;UILongPressGestureRecognizer&nbsp;we created above and implementing the following delegate method:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Button: UIView, UIGestureRecognizerDelegate {\n\n\nlongPressGesture.delegate = self\n\n\nfunc gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {\n    return true\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>By returning true we’re allowing any touches beneath our&nbsp;UILongPressGestureRecognizer&nbsp;to still be called.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Smoothing Animations</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We’ve got our button animating now as soon as the user begins a touch down, we’re not stopping our screen from scrolling but now our we can’t stop our button&nbsp;.ended&nbsp;notification from being called. To fix this we simply guard against the function being called after the user begins to scroll:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>var safeArea: CGFloat { return 5.0 }\n\n@objc func onLongPressRecognised(_ sender: UILongPressGestureRecognizer) {\n        \n    \nswitch sender.state {\n        \n...\ncase .began:\n            \n    self.initialPos = sender.location(in: parent)\n    UIView.animate(withDuration: 0.2, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .init(scaleX: 0.95, y: 0.95)\n    })\n\ncase .changed:\n    let loc = sender.location(in: parent)\n    \n    if loc.x &lt; (initialPos.x - safeArea)\n                || loc.x > (initialPos.x + safeArea)\n                || loc.y &lt; (initialPos.y - safeArea)\n                || loc.y > (initialPos.y + safeArea) {\n                self.isCancelled = true\n                sender.state = .ended\n            }\ncase .ended:\n    UIView.animate(withDuration: 0.3, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .identity\n    })\n    if isCancelled { \n        isCancelled = false\n    } else {\n        .. // do stuff\n    }\n}}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can see I’ve used a safe area here to make the cancellation of this gesture less sensitive and allow a better user experience.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Conclusion</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Smooth button animations create an entertaining, interactive user experience. Although Apple loves to use these animations in their apps, they don’t make it readily known to developers how they can implement similar features. UILongPressGestureRecognizer is a very flexible class with a lot of room for experimentation and creativity in creating a rich user interface.</p>\n<!-- /wp:paragraph -->','Animated Button Presses','','inherit','closed','closed','','40-revision-v1','','','2020-08-18 12:12:09','2020-08-18 04:12:09','',40,'https://willconnelly.com.au/index.php/2020/08/18/40-revision-v1/',0,'revision','',0),(46,1,'2020-08-18 12:12:33','2020-08-18 04:12:33','<!-- wp:paragraph -->\n<p>Creating a button in iOS is simple but if you want a more responsive button like the ones Apple Uses in their app store, you need to get creative with gestures.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Feel free to reproduce and implement this gist however you see fit. <a href=\"https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c\">https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>UILongPressGestureRecognizer</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to be notified when the user first presses on the screen you must look into the state variable of&nbsp;UILongPressGestureRecognizer. By default though, there is a delay before&nbsp;UIGestureRecognizer.State.began&nbsp;is called. You can easily reduce this though by settings delay to 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\n\nlet longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(onLongPressRecognised(_:)))\nlongPressGesture.minimumPressDuration = 0\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>Delegate</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The above code works great in a simple interface but if you nest these buttons in a&nbsp;UIScrollView&nbsp;the gesture absorbs all touches and prevents scrolling. A simple workaround is not to block other&nbsp;UIGesturesRecognizer‘s (which&nbsp;UIScrollView&nbsp;uses under-the-hood to manage scrolling) by overriding the delegate on the&nbsp;UILongPressGestureRecognizer&nbsp;we created above and implementing the following delegate method:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Button: UIView, UIGestureRecognizerDelegate {\n\n\nlongPressGesture.delegate = self\n\n\nfunc gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {\n    return true\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>By returning true we’re allowing any touches beneath our&nbsp;UILongPressGestureRecognizer&nbsp;to still be called.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Smoothing Animations</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We’ve got our button animating now as soon as the user begins a touch down, we’re not stopping our screen from scrolling but now our we can’t stop our button&nbsp;.ended&nbsp;notification from being called. To fix this we simply guard against the function being called after the user begins to scroll:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>var safeArea: CGFloat { return 5.0 }\n\n@objc func onLongPressRecognised(_ sender: UILongPressGestureRecognizer) {\n        \n    \nswitch sender.state {\n        \n...\ncase .began:\n            \n    self.initialPos = sender.location(in: parent)\n    UIView.animate(withDuration: 0.2, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .init(scaleX: 0.95, y: 0.95)\n    })\n\ncase .changed:\n    let loc = sender.location(in: parent)\n    \n    if loc.x &lt; (initialPos.x - safeArea)\n                || loc.x > (initialPos.x + safeArea)\n                || loc.y &lt; (initialPos.y - safeArea)\n                || loc.y > (initialPos.y + safeArea) {\n                self.isCancelled = true\n                sender.state = .ended\n            }\ncase .ended:\n    UIView.animate(withDuration: 0.3, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .identity\n    })\n    if isCancelled { \n        isCancelled = false\n    } else {\n        .. // do stuff\n    }\n}}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can see I’ve used a safe area here to make the cancellation of this gesture less sensitive and allow a better user experience.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Conclusion</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Smooth button animations create an entertaining, interactive user experience. Although Apple loves to use these animations in their apps, they don’t make it readily known to developers how they can implement similar features. UILongPressGestureRecognizer is a very flexible class with a lot of room for experimentation and creativity in creating a rich user interface.</p>\n<!-- /wp:paragraph -->','Animated Button Presses','','inherit','closed','closed','','40-revision-v1','','','2020-08-18 12:12:33','2020-08-18 04:12:33','',40,'https://willconnelly.com.au/index.php/2020/08/18/40-revision-v1/',0,'revision','',0),(48,1,'2020-08-18 12:14:25','2020-08-18 04:14:25','<!-- wp:paragraph -->\n<p>Creating a button in iOS is simple but if you want a more responsive button like the ones Apple Uses in their app store, you need to get creative with gestures.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Feel free to reproduce and implement this gist however you see fit. <a href=\"https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c\">https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>UILongPressGestureRecognizer</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to be notified when the user first presses on the screen you must look into the state variable of&nbsp;UILongPressGestureRecognizer. By default though, there is a delay before&nbsp;UIGestureRecognizer.State.began&nbsp;is called. You can easily reduce this though by settings delay to 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\n\nlet longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(onLongPressRecognised(_:)))\nlongPressGesture.minimumPressDuration = 0\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>Delegate</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The above code works great in a simple interface but if you nest these buttons in a&nbsp;UIScrollView&nbsp;the gesture absorbs all touches and prevents scrolling. A simple workaround is not to block other&nbsp;UIGesturesRecognizer‘s (which&nbsp;UIScrollView&nbsp;uses under-the-hood to manage scrolling) by overriding the delegate on the&nbsp;UILongPressGestureRecognizer&nbsp;we created above and implementing the following delegate method:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Button: UIView, UIGestureRecognizerDelegate {\n\n\nlongPressGesture.delegate = self\n\n\nfunc gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {\n    return true\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>By returning true we’re allowing any touches beneath our&nbsp;UILongPressGestureRecognizer&nbsp;to still be called.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Smoothing Animations</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We’ve got our button animating now as soon as the user begins a touch down, we’re not stopping our screen from scrolling but now our we can’t stop our button&nbsp;.ended&nbsp;notification from being called. To fix this we simply guard against the function being called after the user begins to scroll:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>var safeArea: CGFloat { return 5.0 }\n\n@objc func onLongPressRecognised(_ sender: UILongPressGestureRecognizer) {\n        \n    \nswitch sender.state {\n        \n...\ncase .began:\n            \n    self.initialPos = sender.location(in: parent)\n    UIView.animate(withDuration: 0.2, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .init(scaleX: 0.95, y: 0.95)\n    })\n\ncase .changed:\n    let loc = sender.location(in: parent)\n    \n    if loc.x &lt; (initialPos.x - safeArea)\n                || loc.x > (initialPos.x + safeArea)\n                || loc.y &lt; (initialPos.y - safeArea)\n                || loc.y > (initialPos.y + safeArea) {\n                self.isCancelled = true\n                sender.state = .ended\n            }\ncase .ended:\n    UIView.animate(withDuration: 0.3, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .identity\n    })\n    if isCancelled { \n        isCancelled = false\n    } else {\n        .. // do stuff\n    }\n}}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can see I’ve used a safe area here to make the cancellation of this gesture less sensitive and allow a better user experience.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Conclusion</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Smooth button animations create an entertaining, interactive user experience. Although Apple loves to use these animations in their apps, they don’t make it readily known to developers how they can implement similar features.&nbsp;UILongPressGestureRecognizer&nbsp;is a very flexible class with a lot of room for experimentation and creativity in creating a rich user interface.</p>\n<!-- /wp:paragraph -->','Animated Button Presses','','inherit','closed','closed','','40-revision-v1','','','2020-08-18 12:14:25','2020-08-18 04:14:25','',40,'https://willconnelly.com.au/index.php/2020/08/18/40-revision-v1/',0,'revision','',0),(50,1,'2020-08-11 12:21:43','2020-08-11 04:21:43','<!-- wp:paragraph -->\n<p>The Android file system gives you the flexibility to scope access to your files as you see fit.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong>Storing files within application scope</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong>Context.getCacheDir()</strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is your applications ephemeral storage directory. These files are can be removed by the system at any time and are removed when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getFilesDir()</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Store more permanent application files in this directory. They aren’t automatically removed but will be when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getExternalFilesDir(type: String)</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is effectively the same as getFilesDir() but optionally allows you to specify a subdirectory. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Storing files publicly</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Environment.*</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Environmentprefix gives you access to system environment methods and constants for handling public storage. You can explore the different directory types using the Environment constants. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong><strong>Environment.getExternalStorageDirectory()</strong></strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Android recommends not storing your files here as this your users top-level file directory. You should create subdirectories to store your files neatly or use the following function to store in standardized public directories.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong><strong>Environment.getExternalStoragePublicDirectory(type: String)</strong></strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is the method you use the store files publicly. Pass the appropriate directory to the type parameter for the type of file you’re saving.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A word of caution here: This directory may not exist so you must call .mkdirs() before accessing or storing files here. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong><strong>Application directory in public directories</strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You will most likely want to store your files in a subdirectory inside a public directory to make it easy for the user to identify files coming from your application.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\nval picturesDirectory: File = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)\nval myPicturesDirectory = new File(picturesDirectory, \"Will Connelly\")\nif (!myPicturesDirectory.exists) {\n    myPicturesDirectory.mkdirs()\n\n}\n\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the above example we’ve created a custom directory inside the public pictures directory for the user to easily find photos we’ve stored from our application. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong><strong><strong>Caveats</strong></strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Something to remember is that the media scanner does not automatically scan your media as it’s added. If you\'re adding a picture or video make sure you send a broadcast to the media scanner so it’s available in your users media player applications immediately.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong><strong><strong>Conclusion</strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Android file system is an extremely flexible system with a lot a options for developers to choose from. When using public directories, store your files in a way the user would expect to see them. Use subdirectories to organise your files and the media scanner to expose media immediately.</p>\n<!-- /wp:paragraph -->','Android File Storage','','publish','open','open','','directories-and-scope','','','2020-08-20 12:32:51','2020-08-20 04:32:51','',0,'https://willconnelly.com.au/?p=50',0,'post','',0),(51,1,'2020-08-18 12:17:58','2020-08-18 04:17:58','<!-- wp:paragraph -->\n<p>The Android file system gives you the flexibility to scope access to your files as you see fit.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong>Storing files within application scope</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong>Context.getCacheDir()</strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is your applications ephemeral storage directory. These files are can be removed by the system at any time and are removed when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getFilesDir()</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Store more permanent application files in this directory. They aren’t automatically removed but will be when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getExternalFilesDir(type: String)</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is effectively the same as getFilesDir() but optionally allows you to specify a subdirectory which is automatically created by the system.</p>\n<!-- /wp:paragraph -->','Directories and Scope','','inherit','closed','closed','','50-revision-v1','','','2020-08-18 12:17:58','2020-08-18 04:17:58','',50,'https://willconnelly.com.au/index.php/2020/08/18/50-revision-v1/',0,'revision','',0),(52,1,'2020-08-18 12:21:43','2020-08-18 04:21:43','<!-- wp:paragraph -->\n<p>The Android file system gives you the flexibility to scope access to your files as you see fit.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong>Storing files within application scope</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong>Context.getCacheDir()</strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is your applications ephemeral storage directory. These files are can be removed by the system at any time and are removed when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getFilesDir()</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Store more permanent application files in this directory. They aren’t automatically removed but will be when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getExternalFilesDir(type: String)</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is effectively the same as getFilesDir() but optionally allows you to specify a subdirectory w</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong><strong>Storing files publicly</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Environment.*</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Environmentprefix gives you access to system environment methods and constants for handling public storage. You can explore the different directory ty</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong><strong>Environment.getExternalStorageDirectory()</strong></strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Android recommends not storing your files here as this your users top-level file directory. You should create subdirectories to store your files neatly or use the following function to store in standardized public directories.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong><strong>Environment.getExternalStoragePublicDirectory(type: String)</strong></strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is the method you use the store files publicly. Pass the appropriate directory to the type parameter for the type of file you’re saving.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A word of caution here: This directory may not exist so you must call .mkdirs() before accessing or storing files he</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong><strong><strong>Application directory in public directories</strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You will most likely want to store your files in a subdirectory inside a public directory to make it easy for the user to identify files coming from your application. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\r\nval picturesDirectory: File = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)\nval myPicturesDirectory = new File(picturesDirectory, \"Will Connelly\")\nif (!myPicturesDirectory.exists) {\r\n    myPicturesDirectory.mkdirs()\n\r}\n\r...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the above example we’ve created a custom directory inside the public pictures directory for the user to easily find photos we’ve stored from our applicatio</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong><strong><strong><strong>Caveats</strong></strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Something to remember is that the media scanner does not automatically scan your added media as it’s added. If you add a picture or video make sure you send a broadcast to the media scanner so it’s available in your users media player applications immediately</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong><strong><strong>Conclusion</strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Android file system is an extremely flexible system with a lot a options for developers to choose from. When using public directories, store your files in a way the user would expect to see them. Use subdirectories to organise your files and the media scanner to expose media immediately.</p>\n<!-- /wp:paragraph -->','Directories and Scope','','inherit','closed','closed','','50-revision-v1','','','2020-08-18 12:21:43','2020-08-18 04:21:43','',50,'https://willconnelly.com.au/index.php/2020/08/18/50-revision-v1/',0,'revision','',0),(53,1,'2020-08-18 12:22:18','2020-08-18 04:22:18','<!-- wp:paragraph -->\n<p>The Android file system gives you the flexibility to scope access to your files as you see fit.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong>Storing files within application scope</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong>Context.getCacheDir()</strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is your applications ephemeral storage directory. These files are can be removed by the system at any time and are removed when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getFilesDir()</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Store more permanent application files in this directory. They aren’t automatically removed but will be when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getExternalFilesDir(type: String)</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is effectively the same as&nbsp;getFilesDir()&nbsp;but optionally allows you to specify a subdirectory w</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Storing files publicly</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Environment.*</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The&nbsp;Environmentprefix gives you access to system environment methods and constants for handling public storage. You can explore the different directory ty</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong><strong>Environment.getExternalStorageDirectory()</strong></strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Android recommends not storing your files here as this your users top-level file directory. You should create subdirectories to store your files neatly or use the following function to store in standardized public directories.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong><strong>Environment.getExternalStoragePublicDirectory(type: String)</strong></strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is the method you use the store files publicly. Pass the appropriate directory to the type parameter for the type of file you’re saving.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A word of caution here: This directory may not exist so you must call&nbsp;.mkdirs()&nbsp;before accessing or storing files he</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong><strong>Application directory in public directories</strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You will most likely want to store your files in a subdirectory inside a public directory to make it easy for the user to identify files coming from your application.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\nval picturesDirectory: File = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)\nval myPicturesDirectory = new File(picturesDirectory, \"Will Connelly\")\nif (!myPicturesDirectory.exists) {\n    myPicturesDirectory.mkdirs()\n\n}\n\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the above example we’ve created a custom directory inside the public pictures directory for the user to easily find photos we’ve stored from our applicatio</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong><strong><strong>Caveats</strong></strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Something to remember is that the media scanner does not automatically scan your added media as it’s added. If you add a picture or video make sure you send a broadcast to the media scanner so it’s available in your users media player applications immediately</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong><strong><strong>Conclusion</strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Android file system is an extremely flexible system with a lot a options for developers to choose from. When using public directories, store your files in a way the user would expect to see them. Use subdirectories to organise your files and the media scanner to expose media immediately.</p>\n<!-- /wp:paragraph -->','Directories and Scope','','inherit','closed','closed','','50-revision-v1','','','2020-08-18 12:22:18','2020-08-18 04:22:18','',50,'https://willconnelly.com.au/index.php/2020/08/18/50-revision-v1/',0,'revision','',0),(54,1,'2020-08-18 12:23:31','2020-08-18 04:23:31','<!-- wp:paragraph -->\n<p>The Android file system gives you the flexibility to scope access to your files as you see fit.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong>Storing files within application scope</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong>Context.getCacheDir()</strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is your applications ephemeral storage directory. These files are can be removed by the system at any time and are removed when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getFilesDir()</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Store more permanent application files in this directory. They aren’t automatically removed but will be when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getExternalFilesDir(type: String)</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is effectively the same as&nbsp;getFilesDir()&nbsp;but optionally allows you to specify a subdirectory w</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Storing files publicly</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Environment.*</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The&nbsp;Environmentprefix gives you access to system environment methods and constants for handling public storage. You can explore the different directory ty</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong><strong>Environment.getExternalStorageDirectory()</strong></strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Android recommends not storing your files here as this your users top-level file directory. You should create subdirectories to store your files neatly or use the following function to store in standardized public directories.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong><strong>Environment.getExternalStoragePublicDirectory(type: String)</strong></strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is the method you use the store files publicly. Pass the appropriate directory to the type parameter for the type of file you’re saving.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A word of caution here: This directory may not exist so you must call&nbsp;.mkdirs()&nbsp;before accessing or storing files he</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong><strong>Application directory in public directories</strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You will most likely want to store your files in a subdirectory inside a public directory to make it easy for the user to identify files coming from your application.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\nval picturesDirectory: File = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)\nval myPicturesDirectory = new File(picturesDirectory, \"Will Connelly\")\nif (!myPicturesDirectory.exists) {\n    myPicturesDirectory.mkdirs()\n\n}\n\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the above example we’ve created a custom directory inside the public pictures directory for the user to easily find photos we’ve stored from our applicatio</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong><strong><strong>Caveats</strong></strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Something to remember is that the media scanner does not automatically scan your media as it’s added. If you\'re adding a picture or video make sure you send a broadcast to the media scanner so it’s available in your users media player applications immediately</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong><strong><strong>Conclusion</strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Android file system is an extremely flexible system with a lot a options for developers to choose from. When using public directories, store your files in a way the user would expect to see them. Use subdirectories to organise your files and the media scanner to expose media immediately.</p>\n<!-- /wp:paragraph -->','Directories and Scope','','inherit','closed','closed','','50-revision-v1','','','2020-08-18 12:23:31','2020-08-18 04:23:31','',50,'https://willconnelly.com.au/index.php/2020/08/18/50-revision-v1/',0,'revision','',0),(59,1,'2020-08-18 18:09:45','2020-08-18 10:09:45','<!-- wp:paragraph -->\n<p>Creating a button in iOS is simple but if you want a more responsive button like the ones Apple Uses in their app store, you need to get creative with gestures.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Feel free to reproduce and implement this gist however you see fit. <a href=\"https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c\">https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>UILongPressGestureRecognizer</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to be notified when the user first presses on the screen you must look into the state variable of&nbsp;UILongPressGestureRecognizer. By default though, there is a delay before&nbsp;UIGestureRecognizer.State.began&nbsp;is called. You can easily reduce this though by settings delay to 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\n\nlet longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(onLongPressRecognised(_:)))\nlongPressGesture.minimumPressDuration = 0\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>Delegate</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The above code works great in a simple interface but if you nest these buttons in a&nbsp;UIScrollView&nbsp;the gesture absorbs all touches and prevents scrolling. A simple workaround is not to block other&nbsp;UIGesturesRecognizer‘s (which&nbsp;UIScrollView&nbsp;uses under-the-hood to manage scrolling) by overriding the delegate on the&nbsp;UILongPressGestureRecognizer&nbsp;we created above and implementing the following delegate method:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Button: UIView, UIGestureRecognizerDelegate {\n\n\nlongPressGesture.delegate = self\n\n\nfunc gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {\n    return true\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>By returning true we’re allowing any touches beneath our&nbsp;UILongPressGestureRecognizer&nbsp;to still be called.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Smoothing Animations</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We’ve got our button animating now as soon as the user begins a touch down, we’re not stopping our screen from scrolling but now our we can’t stop our button&nbsp;.ended&nbsp;notification from being called. To fix this we simply guard against the function being called after the user begins to scroll:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>var safeArea: CGFloat { return 5.0 }\n\n@objc func onLongPressRecognised(_ sender: UILongPressGestureRecognizer) {\n        \n    \nswitch sender.state {\n        \n...\ncase .began:\n            \n    self.initialPos = sender.location(in: parent)\n    UIView.animate(withDuration: 0.2, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .init(scaleX: 0.95, y: 0.95)\n    })\n\ncase .changed:\n    let loc = sender.location(in: parent)\n    \n    if loc.x &lt; (initialPos.x - safeArea)\n                || loc.x > (initialPos.x + safeArea)\n                || loc.y &lt; (initialPos.y - safeArea)\n                || loc.y > (initialPos.y + safeArea) {\n                self.isCancelled = true\n                sender.state = .ended\n            }\ncase .ended:\n    UIView.animate(withDuration: 0.3, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .identity\n    })\n    if isCancelled { \n        isCancelled = false\n    } else {\n        .. // do stuff\n    }\n}}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can see I’ve used a safe area here to make the cancellation of this gesture less sensitive and allow a better user experience.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Conclusion</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Smooth button animations create an entertaining, interactive user experience. Although Apple loves to use these animations in their apps, they don’t make it readily known to developers how they can implement similar features.&nbsp;UILongPressGestureRecognizer&nbsp;is a very flexible class with a lot of room for experimentation and creativity in creating a rich user interface.</p>\n<!-- /wp:paragraph -->','Animating Views With UILongPressGestureRecognizer','','inherit','closed','closed','','40-revision-v1','','','2020-08-18 18:09:45','2020-08-18 10:09:45','',40,'https://willconnelly.com.au/index.php/2020/08/18/40-revision-v1/',0,'revision','',0),(60,1,'2020-08-18 18:10:09','2020-08-18 10:10:09','<!-- wp:paragraph -->\n<p>The Android file system gives you the flexibility to scope access to your files as you see fit.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong>Storing files within application scope</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong>Context.getCacheDir()</strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is your applications ephemeral storage directory. These files are can be removed by the system at any time and are removed when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getFilesDir()</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Store more permanent application files in this directory. They aren’t automatically removed but will be when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getExternalFilesDir(type: String)</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is effectively the same as&nbsp;getFilesDir()&nbsp;but optionally allows you to specify a subdirectory w</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Storing files publicly</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Environment.*</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The&nbsp;Environmentprefix gives you access to system environment methods and constants for handling public storage. You can explore the different directory ty</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong><strong>Environment.getExternalStorageDirectory()</strong></strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Android recommends not storing your files here as this your users top-level file directory. You should create subdirectories to store your files neatly or use the following function to store in standardized public directories.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong><strong>Environment.getExternalStoragePublicDirectory(type: String)</strong></strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is the method you use the store files publicly. Pass the appropriate directory to the type parameter for the type of file you’re saving.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A word of caution here: This directory may not exist so you must call&nbsp;.mkdirs()&nbsp;before accessing or storing files he</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong><strong>Application directory in public directories</strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You will most likely want to store your files in a subdirectory inside a public directory to make it easy for the user to identify files coming from your application.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\nval picturesDirectory: File = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)\nval myPicturesDirectory = new File(picturesDirectory, \"Will Connelly\")\nif (!myPicturesDirectory.exists) {\n    myPicturesDirectory.mkdirs()\n\n}\n\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the above example we’ve created a custom directory inside the public pictures directory for the user to easily find photos we’ve stored from our applicatio</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong><strong><strong>Caveats</strong></strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Something to remember is that the media scanner does not automatically scan your media as it’s added. If you\'re adding a picture or video make sure you send a broadcast to the media scanner so it’s available in your users media player applications immediately</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong><strong><strong>Conclusion</strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Android file system is an extremely flexible system with a lot a options for developers to choose from. When using public directories, store your files in a way the user would expect to see them. Use subdirectories to organise your files and the media scanner to expose media immediately.</p>\n<!-- /wp:paragraph -->','Android File Storage','','inherit','closed','closed','','50-revision-v1','','','2020-08-18 18:10:09','2020-08-18 10:10:09','',50,'https://willconnelly.com.au/index.php/2020/08/18/50-revision-v1/',0,'revision','',0),(61,1,'2020-08-18 19:19:03','2020-08-18 11:19:03','<!-- wp:paragraph -->\n<p>In any language that passes values by reference memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to help you trace unreleased objects and mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Scenario </h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Say you want to an object to be notified when changes occur within another object. You <em>could</em> pass the first object to the second and the second could call the first’s pubic methods to communicate the change. What you create is a cyclical dependency where object two cannot be released until object one is released and vice versa.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class One: Listener {\n    val objectOfClassTwo = Two(listener: self)\n    \n    // Inherited from Listener\n    public func onEmit(){ ... } \n}\n\nclass Two {\n    let listener: Listener\n\n    init(listener: Listener) {\n        self.listener = listener\n    }\n\n    func doStuff() {\n        self.listener.onEmit()\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Under The Hood</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Clang compiler developed by Apple and employed in their operating systems uses Automatic Reference Counting (ARC) to manage memory - how it does this is written on the tin. When the reference count for any object drops to zero the object is released and the memory it was occupying is freed. One and Two now hold a reference to each other and neither can be released. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Example</h5>\n<!-- /wp:heading -->\n\n<!-- wp:media-text {\"mediaId\":74,\"mediaLink\":\"https://willconnelly.com.au/index.php/2020/08/18/memory-management-in-ios-applications/screen-shot-2020-08-19-at-12-37-19-pm/\",\"mediaType\":\"image\"} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.37.19-pm.png\" alt=\"\" class=\"wp-image-74\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph -->\n<p>We can take the scenario above and put it into a UIViewController to see how this might affect our applications in the real world. iOS will allow us to carry on pushing and popping the stack and when we open up the memory graph  <img class=\"wp-image-76\" style=\"width: 67px;\" src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.38.58-pm.png\" alt=\"\"> we will find all instances of One and Two still allocated in memory.</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:image {\"id\":73,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.35.53-pm.png\" alt=\"\" class=\"wp-image-73\"/><figcaption>The purple exclamation marks indicate an object that has leaked</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Although this application is tiny and contains no views, it\'s easy to see how this could cause problems such as Out Of Memory (OOM) errors.</p>\n<!-- /wp:paragraph -->','Memory Management In iOS Applications','','publish','open','open','','memory-management-in-ios-applications','','','2020-08-19 12:55:43','2020-08-19 04:55:43','',0,'https://willconnelly.com.au/?p=61',0,'post','',0),(62,1,'2020-08-18 18:37:48','2020-08-18 10:37:48','<!-- wp:paragraph -->\n<p>In any language that passes values by reference, memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to trace unreleased objects and help you mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Memory Management In Mobile Applications','','inherit','closed','closed','','61-revision-v1','','','2020-08-18 18:37:48','2020-08-18 10:37:48','',61,'https://willconnelly.com.au/index.php/2020/08/18/61-revision-v1/',0,'revision','',0),(63,1,'2020-08-18 18:39:49','2020-08-18 10:39:49','<!-- wp:paragraph -->\n<p>In any language that passes values by reference memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to help you trace unreleased objects and mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5>iOS </h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6>Common scenario</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A common</p>\n<!-- /wp:paragraph -->','Memory Management In Mobile Applications','','inherit','closed','closed','','61-revision-v1','','','2020-08-18 18:39:49','2020-08-18 10:39:49','',61,'https://willconnelly.com.au/index.php/2020/08/18/61-revision-v1/',0,'revision','',0),(64,1,'2020-08-18 18:48:29','2020-08-18 10:48:29','<!-- wp:paragraph -->\n<p>In any language that passes values by reference memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to help you trace unreleased objects and mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5>iOS </h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6>Common scenario</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Say you want to an object to be notified when changes occur within another object. You <em>could</em> pass the first object to the second and the second could call the first’s pubic methods to communicate the change. What you create is a cyclical dependency where object two cannot be released until object one is released and vice versa.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class One: Listener {\n    val objectOfClassTwo(listener: self)\n\n    public func onEmit(){ ... } \n}\n\nclass Two {\n    var listener: Listener?\n\n    init(listener: Listener) {\n        self.listener = listener\n    }\n\n    func doStuff() {\n        self.listener?.onEmit()\n    }\n}</code></pre>\n<!-- /wp:code -->','Memory Management In Mobile Applications','','inherit','closed','closed','','61-revision-v1','','','2020-08-18 18:48:29','2020-08-18 10:48:29','',61,'https://willconnelly.com.au/index.php/2020/08/18/61-revision-v1/',0,'revision','',0),(65,1,'2020-08-18 18:50:11','2020-08-18 10:50:11','<!-- wp:paragraph -->\n<p>In any language that passes values by reference memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to help you trace unreleased objects and mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5>iOS </h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6>Common scenario</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Say you want to an object to be notified when changes occur within another object. You <em>could</em> pass the first object to the second and the second could call the first’s pubic methods to communicate the change. What you create is a cyclical dependency where object two cannot be released until object one is released and vice versa.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class One: Listener {\n    val objectOfClassTwo(listener: self)\n    \n    // Inherited from Listener\n    public func onEmit(){ ... } \n}\n\nclass Two {\n    var listener: Listener?\n\n    init(listener: Listener) {\n        self.listener = listener\n    }\n\n    func doStuff() {\n        self.listener?.onEmit()\n    }\n}</code></pre>\n<!-- /wp:code -->','Memory Management In Mobile Applications','','inherit','closed','closed','','61-revision-v1','','','2020-08-18 18:50:11','2020-08-18 10:50:11','',61,'https://willconnelly.com.au/index.php/2020/08/18/61-revision-v1/',0,'revision','',0),(66,1,'2020-08-18 19:02:39','2020-08-18 11:02:39','<!-- wp:paragraph -->\n<p>In any language that passes values by reference memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to help you trace unreleased objects and mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5>iOS </h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6>Common Scenario </h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Say you want to an object to be notified when changes occur within another object. You <em>could</em> pass the first object to the second and the second could call the first’s pubic methods to communicate the change. What you create is a cyclical dependency where object two cannot be released until object one is released and vice versa.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class One: Listener {\n    val objectOfClassTwo(listener: self)\n    \n    // Inherited from Listener\n    public func onEmit(){ ... } \n}\n\nclass Two {\n    var listener: Listener?\n\n    init(listener: Listener) {\n        self.listener = listener\n    }\n\n    func doStuff() {\n        self.listener?.onEmit()\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6>Under The Hood</h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Clang compiler developed by Apple and employed in their operating systems uses Automatic Reference Counting (ARC) to manage memory - how it does this is written on the tin. When the reference count for any object drops to zero the object is released and the memory it was occupying is freed. </p>\n<!-- /wp:paragraph -->','Memory Management In Mobile Applications','','inherit','closed','closed','','61-revision-v1','','','2020-08-18 19:02:39','2020-08-18 11:02:39','',61,'https://willconnelly.com.au/index.php/2020/08/18/61-revision-v1/',0,'revision','',0),(67,1,'2020-08-18 19:15:18','2020-08-18 11:15:18','<!-- wp:paragraph -->\n<p>In any language that passes values by reference memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to help you trace unreleased objects and mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5>Common Scenario </h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Say you want to an object to be notified when changes occur within another object. You <em>could</em> pass the first object to the second and the second could call the first’s pubic methods to communicate the change. What you create is a cyclical dependency where object two cannot be released until object one is released and vice versa.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class One: Listener {\n    val objectOfClassTwo = Two(listener: self)\n    \n    // Inherited from Listener\n    public func onEmit(){ ... } \n}\n\nclass Two {\n    var listener: Listener?\n\n    init(listener: Listener) {\n        self.listener = listener\n    }\n\n    func doStuff() {\n        self.listener?.onEmit()\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Under The Hood</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Clang compiler developed by Apple and employed in their operating systems uses Automatic Reference Counting (ARC) to manage memory - how it does this is written on the tin. When the reference count for any object drops to zero the object is released and the memory it was occupying is freed. One and Two now hold a reference to each other neither can be released. </p>\n<!-- /wp:paragraph -->','Memory Management In Mobile Applications','','inherit','closed','closed','','61-revision-v1','','','2020-08-18 19:15:18','2020-08-18 11:15:18','',61,'https://willconnelly.com.au/index.php/2020/08/18/61-revision-v1/',0,'revision','',0),(68,1,'2020-08-18 19:15:23','2020-08-18 11:15:23','<!-- wp:paragraph -->\n<p>In any language that passes values by reference memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to help you trace unreleased objects and mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Common Scenario </h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Say you want to an object to be notified when changes occur within another object. You <em>could</em> pass the first object to the second and the second could call the first’s pubic methods to communicate the change. What you create is a cyclical dependency where object two cannot be released until object one is released and vice versa.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class One: Listener {\n    val objectOfClassTwo = Two(listener: self)\n    \n    // Inherited from Listener\n    public func onEmit(){ ... } \n}\n\nclass Two {\n    var listener: Listener?\n\n    init(listener: Listener) {\n        self.listener = listener\n    }\n\n    func doStuff() {\n        self.listener?.onEmit()\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Under The Hood</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Clang compiler developed by Apple and employed in their operating systems uses Automatic Reference Counting (ARC) to manage memory - how it does this is written on the tin. When the reference count for any object drops to zero the object is released and the memory it was occupying is freed. One and Two now hold a reference to each other neither can be released. </p>\n<!-- /wp:paragraph -->','Memory Management In Mobile Applications','','inherit','closed','closed','','61-revision-v1','','','2020-08-18 19:15:23','2020-08-18 11:15:23','',61,'https://willconnelly.com.au/index.php/2020/08/18/61-revision-v1/',0,'revision','',0),(69,1,'2020-08-18 19:16:29','2020-08-18 11:16:29','<!-- wp:paragraph -->\n<p>In any language that passes values by reference memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to help you trace unreleased objects and mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Common Scenario </h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Say you want to an object to be notified when changes occur within another object. You <em>could</em> pass the first object to the second and the second could call the first’s pubic methods to communicate the change. What you create is a cyclical dependency where object two cannot be released until object one is released and vice versa.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class One: Listener {\n    val objectOfClassTwo = Two(listener: self)\n    \n    // Inherited from Listener\n    public func onEmit(){ ... } \n}\n\nclass Two {\n    var listener: Listener?\n\n    init(listener: Listener) {\n        self.listener = listener\n    }\n\n    func doStuff() {\n        self.listener?.onEmit()\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Under The Hood</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Clang compiler developed by Apple and employed in their operating systems uses Automatic Reference Counting (ARC) to manage memory - how it does this is written on the tin. When the reference count for any object drops to zero the object is released and the memory it was occupying is freed. One and Two now hold a reference to each other neither can be released. </p>\n<!-- /wp:paragraph -->','Memory Management In iOS Applications','','inherit','closed','closed','','61-revision-v1','','','2020-08-18 19:16:29','2020-08-18 11:16:29','',61,'https://willconnelly.com.au/index.php/2020/08/18/61-revision-v1/',0,'revision','',0),(70,1,'2020-08-18 19:19:03','2020-08-18 11:19:03','<!-- wp:paragraph -->\n<p>In any language that passes values by reference memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to help you trace unreleased objects and mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Common Scenario </h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Say you want to an object to be notified when changes occur within another object. You <em>could</em> pass the first object to the second and the second could call the first’s pubic methods to communicate the change. What you create is a cyclical dependency where object two cannot be released until object one is released and vice versa.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class One: Listener {\n    val objectOfClassTwo = Two(listener: self)\n    \n    // Inherited from Listener\n    public func onEmit(){ ... } \n}\n\nclass Two {\n    var listener: Listener?\n\n    init(listener: Listener) {\n        self.listener = listener\n    }\n\n    func doStuff() {\n        self.listener?.onEmit()\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Under The Hood</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Clang compiler developed by Apple and employed in their operating systems uses Automatic Reference Counting (ARC) to manage memory - how it does this is written on the tin. When the reference count for any object drops to zero the object is released and the memory it was occupying is freed. One and Two now hold a reference to each other and neither can be released. </p>\n<!-- /wp:paragraph -->','Memory Management In iOS Applications','','inherit','closed','closed','','61-revision-v1','','','2020-08-18 19:19:03','2020-08-18 11:19:03','',61,'https://willconnelly.com.au/index.php/2020/08/18/61-revision-v1/',0,'revision','',0),(72,1,'2020-08-18 20:52:47','2020-08-18 12:52:47','<!-- wp:paragraph -->\n<p>The Android file system gives you the flexibility to scope access to your files as you see fit.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong>Storing files within application scope</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong>Context.getCacheDir()</strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is your applications ephemeral storage directory. These files are can be removed by the system at any time and are removed when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getFilesDir()</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Store more permanent application files in this directory. They aren’t automatically removed but will be when you uninstall your application.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Context.getExternalFilesDir(type: String)</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is effectively the same as getFilesDir() but optionally allows you to specify a subdirectory. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Storing files publicly</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong>Environment.*</strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Environmentprefix gives you access to system environment methods and constants for handling public storage. You can explore the different directory types using the Environment constants. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong><strong>Environment.getExternalStorageDirectory()</strong></strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Android recommends not storing your files here as this your users top-level file directory. You should create subdirectories to store your files neatly or use the following function to store in standardized public directories.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":6} -->\n<h6><strong><strong><strong>Environment.getExternalStoragePublicDirectory(type: String)</strong></strong></strong></h6>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is the method you use the store files publicly. Pass the appropriate directory to the type parameter for the type of file you’re saving.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A word of caution here: This directory may not exist so you must call .mkdirs() before accessing or storing files here. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong><strong>Application directory in public directories</strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You will most likely want to store your files in a subdirectory inside a public directory to make it easy for the user to identify files coming from your application.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\nval picturesDirectory: File = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)\nval myPicturesDirectory = new File(picturesDirectory, \"Will Connelly\")\nif (!myPicturesDirectory.exists) {\n    myPicturesDirectory.mkdirs()\n\n}\n\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the above example we’ve created a custom directory inside the public pictures directory for the user to easily find photos we’ve stored from our application. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong><strong><strong>Caveats</strong></strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Something to remember is that the media scanner does not automatically scan your media as it’s added. If you\'re adding a picture or video make sure you send a broadcast to the media scanner so it’s available in your users media player applications immediately.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong><strong><strong>Conclusion</strong></strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Android file system is an extremely flexible system with a lot a options for developers to choose from. When using public directories, store your files in a way the user would expect to see them. Use subdirectories to organise your files and the media scanner to expose media immediately.</p>\n<!-- /wp:paragraph -->','Android File Storage','','inherit','closed','closed','','50-revision-v1','','','2020-08-18 20:52:47','2020-08-18 12:52:47','',50,'https://willconnelly.com.au/index.php/2020/08/18/50-revision-v1/',0,'revision','',0),(73,1,'2020-08-19 12:40:32','2020-08-19 04:40:32','','Screen-Shot-2020-08-19-at-12.35.53-pm','','inherit','open','closed','','screen-shot-2020-08-19-at-12-35-53-pm','','','2020-08-19 12:40:32','2020-08-19 04:40:32','',61,'https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.35.53-pm.png',0,'attachment','image/png',0),(74,1,'2020-08-19 12:40:44','2020-08-19 04:40:44','','Screen-Shot-2020-08-19-at-12.37.19-pm','','inherit','open','closed','','screen-shot-2020-08-19-at-12-37-19-pm','','','2020-08-19 12:40:44','2020-08-19 04:40:44','',61,'https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.37.19-pm.png',0,'attachment','image/png',0),(75,1,'2020-08-19 12:46:57','2020-08-19 04:46:57','<!-- wp:paragraph -->\n<p>In any language that passes values by reference memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to help you trace unreleased objects and mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Scenario </h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Say you want to an object to be notified when changes occur within another object. You <em>could</em> pass the first object to the second and the second could call the first’s pubic methods to communicate the change. What you create is a cyclical dependency where object two cannot be released until object one is released and vice versa.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class One: Listener {\n    val objectOfClassTwo = Two(listener: self)\n    \n    // Inherited from Listener\n    public func onEmit(){ ... } \n}\n\nclass Two {\n    var listener: Listener?\n\n    init(listener: Listener) {\n        self.listener = listener\n    }\n\n    func doStuff() {\n        self.listener?.onEmit()\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Under The Hood</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Clang compiler developed by Apple and employed in their operating systems uses Automatic Reference Counting (ARC) to manage memory - how it does this is written on the tin. When the reference count for any object drops to zero the object is released and the memory it was occupying is freed. One and Two now hold a reference to each other and neither can be released. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5>Example</h5>\n<!-- /wp:heading -->\n\n<!-- wp:media-text {\"mediaId\":74,\"mediaLink\":\"https://willconnelly.com.au/index.php/2020/08/18/memory-management-in-ios-applications/screen-shot-2020-08-19-at-12-37-19-pm/\",\"mediaType\":\"image\"} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.37.19-pm.png\" alt=\"\" class=\"wp-image-74\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph -->\n<p>We can take the scenario above and put it into a UIViewController to see how this might affect our applications in the real world. Now when we navigate away from One iOS won\'t throw an exception and will allows us to carry on pushing and popping the stack willy nilly. I\'ve done this several times and opened up the memory graph </p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Memory Management In iOS Applications','','inherit','closed','closed','','61-revision-v1','','','2020-08-19 12:46:57','2020-08-19 04:46:57','',61,'https://willconnelly.com.au/index.php/2020/08/19/61-revision-v1/',0,'revision','',0),(76,1,'2020-08-19 12:47:16','2020-08-19 04:47:16','','Screen Shot 2020-08-19 at 12.38.58 pm','','inherit','open','closed','','screen-shot-2020-08-19-at-12-38-58-pm','','','2020-08-19 12:47:16','2020-08-19 04:47:16','',61,'https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.38.58-pm.png',0,'attachment','image/png',0),(77,1,'2020-08-19 12:52:10','2020-08-19 04:52:10','<!-- wp:paragraph -->\n<p>In any language that passes values by reference memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to help you trace unreleased objects and mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Scenario </h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Say you want to an object to be notified when changes occur within another object. You <em>could</em> pass the first object to the second and the second could call the first’s pubic methods to communicate the change. What you create is a cyclical dependency where object two cannot be released until object one is released and vice versa.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class One: Listener {\n    val objectOfClassTwo = Two(listener: self)\n    \n    // Inherited from Listener\n    public func onEmit(){ ... } \n}\n\nclass Two {\n    var listener: Listener?\n\n    init(listener: Listener) {\n        self.listener = listener\n    }\n\n    func doStuff() {\n        self.listener?.onEmit()\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Under The Hood</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Clang compiler developed by Apple and employed in their operating systems uses Automatic Reference Counting (ARC) to manage memory - how it does this is written on the tin. When the reference count for any object drops to zero the object is released and the memory it was occupying is freed. One and Two now hold a reference to each other and neither can be released. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5>Example</h5>\n<!-- /wp:heading -->\n\n<!-- wp:media-text {\"mediaId\":74,\"mediaLink\":\"https://willconnelly.com.au/index.php/2020/08/18/memory-management-in-ios-applications/screen-shot-2020-08-19-at-12-37-19-pm/\",\"mediaType\":\"image\"} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.37.19-pm.png\" alt=\"\" class=\"wp-image-74\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph -->\n<p>We can take the scenario above and put it into a UIViewController to see how this might affect our applications in the real world. iOS will allow us to carry on pushing and popping the stack and when we open up the memory graph  <img class=\"wp-image-76\" style=\"width: 67px;\" src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.38.58-pm.png\" alt=\"\"> we will find all instances of One and Two still allocated in memory.</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:image {\"id\":73,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.35.53-pm.png\" alt=\"\" class=\"wp-image-73\"/><figcaption>The purple exclamation marks indicate an object that has leaked</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Although this application is tiny and contains no views, it\'s easy to see how this could cause problems such as Out Of Memory (OOM) errors.</p>\n<!-- /wp:paragraph -->','Memory Management In iOS Applications','','inherit','closed','closed','','61-revision-v1','','','2020-08-19 12:52:10','2020-08-19 04:52:10','',61,'https://willconnelly.com.au/index.php/2020/08/19/61-revision-v1/',0,'revision','',0),(79,1,'2020-08-19 12:54:46','2020-08-19 04:54:46','<!-- wp:paragraph -->\n<p>In any language that passes values by reference memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to help you trace unreleased objects and mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Scenario </h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Say you want to an object to be notified when changes occur within another object. You <em>could</em> pass the first object to the second and the second could call the first’s pubic methods to communicate the change. What you create is a cyclical dependency where object two cannot be released until object one is released and vice versa.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class One: Listener {\n    val objectOfClassTwo = Two(listener: self)\n    \n    // Inherited from Listener\n    public func onEmit(){ ... } \n}\n\nclass Two {\n    let listener: Listener\n\n    init(listener: Listener) {\n        self.listener = listener\n    }\n\n    func doStuff() {\n        self.listener.onEmit()\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Under The Hood</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Clang compiler developed by Apple and employed in their operating systems uses Automatic Reference Counting (ARC) to manage memory - how it does this is written on the tin. When the reference count for any object drops to zero the object is released and the memory it was occupying is freed. One and Two now hold a reference to each other and neither can be released. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5>Example</h5>\n<!-- /wp:heading -->\n\n<!-- wp:media-text {\"mediaId\":74,\"mediaLink\":\"https://willconnelly.com.au/index.php/2020/08/18/memory-management-in-ios-applications/screen-shot-2020-08-19-at-12-37-19-pm/\",\"mediaType\":\"image\"} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.37.19-pm.png\" alt=\"\" class=\"wp-image-74\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph -->\n<p>We can take the scenario above and put it into a UIViewController to see how this might affect our applications in the real world. iOS will allow us to carry on pushing and popping the stack and when we open up the memory graph  <img class=\"wp-image-76\" style=\"width: 67px;\" src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.38.58-pm.png\" alt=\"\"> we will find all instances of One and Two still allocated in memory.</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:image {\"id\":73,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.35.53-pm.png\" alt=\"\" class=\"wp-image-73\"/><figcaption>The purple exclamation marks indicate an object that has leaked</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Although this application is tiny and contains no views, it\'s easy to see how this could cause problems such as Out Of Memory (OOM) errors.</p>\n<!-- /wp:paragraph -->','Memory Management In iOS Applications','','inherit','closed','closed','','61-revision-v1','','','2020-08-19 12:54:46','2020-08-19 04:54:46','',61,'https://willconnelly.com.au/index.php/2020/08/19/61-revision-v1/',0,'revision','',0),(80,1,'2020-08-19 12:55:42','2020-08-19 04:55:42','<!-- wp:paragraph -->\n<p>In any language that passes values by reference memory management will need to be front of mind. In iOS you can use the memory graph and on Android you have the Memory Profiler to help you trace unreleased objects and mitigate leaks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Scenario </h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Say you want to an object to be notified when changes occur within another object. You <em>could</em> pass the first object to the second and the second could call the first’s pubic methods to communicate the change. What you create is a cyclical dependency where object two cannot be released until object one is released and vice versa.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class One: Listener {\n    val objectOfClassTwo = Two(listener: self)\n    \n    // Inherited from Listener\n    public func onEmit(){ ... } \n}\n\nclass Two {\n    let listener: Listener\n\n    init(listener: Listener) {\n        self.listener = listener\n    }\n\n    func doStuff() {\n        self.listener.onEmit()\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Under The Hood</h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Clang compiler developed by Apple and employed in their operating systems uses Automatic Reference Counting (ARC) to manage memory - how it does this is written on the tin. When the reference count for any object drops to zero the object is released and the memory it was occupying is freed. One and Two now hold a reference to each other and neither can be released. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br>Example</h5>\n<!-- /wp:heading -->\n\n<!-- wp:media-text {\"mediaId\":74,\"mediaLink\":\"https://willconnelly.com.au/index.php/2020/08/18/memory-management-in-ios-applications/screen-shot-2020-08-19-at-12-37-19-pm/\",\"mediaType\":\"image\"} -->\n<div class=\"wp-block-media-text alignwide is-stacked-on-mobile\"><figure class=\"wp-block-media-text__media\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.37.19-pm.png\" alt=\"\" class=\"wp-image-74\"/></figure><div class=\"wp-block-media-text__content\"><!-- wp:paragraph -->\n<p>We can take the scenario above and put it into a UIViewController to see how this might affect our applications in the real world. iOS will allow us to carry on pushing and popping the stack and when we open up the memory graph  <img class=\"wp-image-76\" style=\"width: 67px;\" src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.38.58-pm.png\" alt=\"\"> we will find all instances of One and Two still allocated in memory.</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:media-text -->\n\n<!-- wp:image {\"id\":73,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://willconnelly.com.au/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-12.35.53-pm.png\" alt=\"\" class=\"wp-image-73\"/><figcaption>The purple exclamation marks indicate an object that has leaked</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Although this application is tiny and contains no views, it\'s easy to see how this could cause problems such as Out Of Memory (OOM) errors.</p>\n<!-- /wp:paragraph -->','Memory Management In iOS Applications','','inherit','closed','closed','','61-revision-v1','','','2020-08-19 12:55:42','2020-08-19 04:55:42','',61,'https://willconnelly.com.au/index.php/2020/08/19/61-revision-v1/',0,'revision','',0),(83,1,'2020-08-22 11:52:55','2020-08-22 03:52:55','.navbar-toggler:before {\n	line-height: 40px;\n}\n\n.wp-block-code {\n	padding: 20px;\n	border-width: 0.5px;\n	border-color: #e4e4e4;\n	border-style: solid;\n	border-radius: 8px;\n}\n\n.wp-block-quote {\n	width: 100%;\n	font-size: 22px;\n}','foliopress','','publish','closed','closed','','foliopress','','','2020-08-22 12:30:00','2020-08-22 04:30:00','',0,'https://willconnelly.com.au/index.php/2020/08/22/foliopress/',0,'custom_css','',0),(84,1,'2020-08-22 11:52:55','2020-08-22 03:52:55','.navbar-toggler:before {\n	line-height: 40px;\n}','foliopress','','inherit','closed','closed','','83-revision-v1','','','2020-08-22 11:52:55','2020-08-22 03:52:55','',83,'https://willconnelly.com.au/index.php/2020/08/22/83-revision-v1/',0,'revision','',0),(87,1,'2020-08-22 12:10:30','2020-08-22 04:10:30','','me','','inherit','open','closed','','me-3','','','2020-08-22 12:10:30','2020-08-22 04:10:30','',0,'https://willconnelly.com.au/wp-content/uploads/2020/08/me-2.png',0,'attachment','image/png',0),(90,1,'2020-08-22 12:30:00','2020-08-22 04:30:00','.navbar-toggler:before {\n	line-height: 40px;\n}\n\n.wp-block-code {\n	padding: 20px;\n	border-width: 0.5px;\n	border-color: #e4e4e4;\n	border-style: solid;\n	border-radius: 8px;\n}\n\n.wp-block-quote {\n	width: 100%;\n	font-size: 22px;\n}','foliopress','','inherit','closed','closed','','83-revision-v1','','','2020-08-22 12:30:00','2020-08-22 04:30:00','',83,'https://willconnelly.com.au/index.php/2020/08/22/83-revision-v1/',0,'revision','',0),(91,1,'2020-08-22 12:31:09','2020-08-22 04:31:09','<!-- wp:paragraph -->\n<p>Creating a button in iOS is simple but if you want a more responsive button like the ones Apple Uses in their app store, you need to get creative with gestures.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Feel free to reproduce and implement this gist however you see fit. <a href=\"https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c\">https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong>UILongPressGestureRecognizer</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to be notified when the user first presses on the screen you must look into the state variable of&nbsp;UILongPressGestureRecognizer. By default though, there is a delay before&nbsp;UIGestureRecognizer.State.began&nbsp;is called. You can easily reduce this though by settings delay to 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\n\nlet longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(onLongPressRecognised(_:)))\nlongPressGesture.minimumPressDuration = 0\n...\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>Delegate</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The above code works great in a simple interface but if you nest these buttons in a&nbsp;UIScrollView&nbsp;the gesture absorbs all touches and prevents scrolling. A simple workaround is not to block other&nbsp;UIGesturesRecognizer‘s (which&nbsp;UIScrollView&nbsp;uses under-the-hood to manage scrolling) by overriding the delegate on the&nbsp;UILongPressGestureRecognizer&nbsp;we created above and implementing the following delegate method:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Button: UIView, UIGestureRecognizerDelegate {\n\n\nlongPressGesture.delegate = self\n\n\nfunc gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {\n    return true\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>By returning true we’re allowing any touches beneath our&nbsp;UILongPressGestureRecognizer&nbsp;to still be called.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Smoothing Animations</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We’ve got our button animating now as soon as the user begins a touch down, we’re not stopping our screen from scrolling but now our we can’t stop our button&nbsp;.ended&nbsp;notification from being called. To fix this we simply guard against the function being called after the user begins to scroll:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>var safeArea: CGFloat { return 5.0 }\n\n@objc func onLongPressRecognised(_ sender: UILongPressGestureRecognizer) {\n        \n    \nswitch sender.state {\n        \n...\ncase .began:\n            \n    self.initialPos = sender.location(in: parent)\n    UIView.animate(withDuration: 0.2, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .init(scaleX: 0.95, y: 0.95)\n    })\n\ncase .changed:\n    let loc = sender.location(in: parent)\n    \n    if loc.x &lt; (initialPos.x - safeArea)\n                || loc.x > (initialPos.x + safeArea)\n                || loc.y &lt; (initialPos.y - safeArea)\n                || loc.y > (initialPos.y + safeArea) {\n                self.isCancelled = true\n                sender.state = .ended\n            }\ncase .ended:\n    UIView.animate(withDuration: 0.3, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .identity\n    })\n    if isCancelled { \n        isCancelled = false\n    } else {\n        .. // do stuff\n    }\n}}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can see I’ve used a safe area here to make the cancellation of this gesture less sensitive and allow a better user experience.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Conclusion</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Smooth button animations create an entertaining, interactive user experience. Although Apple loves to use these animations in their apps, they don’t make it readily known to developers how they can implement similar features.&nbsp;UILongPressGestureRecognizer&nbsp;is a very flexible class with a lot of room for experimentation and creativity in creating a rich user interface.</p>\n<!-- /wp:paragraph -->','Animating Views With UILongPressGestureRecognizer','','inherit','closed','closed','','40-revision-v1','','','2020-08-22 12:31:09','2020-08-22 04:31:09','',40,'https://willconnelly.com.au/index.php/2020/08/22/40-revision-v1/',0,'revision','',0),(92,1,'2020-08-22 12:32:17','2020-08-22 04:32:17','<!-- wp:paragraph -->\n<p>Creating a button in iOS is simple but if you want a more responsive button like the ones Apple Uses in their app store, you need to get creative with gestures.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Feel free to reproduce and implement this gist however you see fit. <a href=\"https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c\">https://gist.github.com/willconno/dd891db6764a82bbc6e9633e9ec7b67c</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><strong>UILongPressGestureRecognizer</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to be notified when the user first presses on the screen you must look into the state variable of&nbsp;UILongPressGestureRecognizer. By default though, there is a delay before&nbsp;UIGestureRecognizer.State.began&nbsp;is called. You can easily reduce this though by settings delay to 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>let longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(onLongPressRecognised(_:)))\n\nlongPressGesture.minimumPressDuration = 0</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong>Delegate</strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The above code works great in a simple interface but if you nest these buttons in a&nbsp;UIScrollView&nbsp;the gesture absorbs all touches and prevents scrolling. A simple workaround is not to block other&nbsp;UIGesturesRecognizer‘s (which&nbsp;UIScrollView&nbsp;uses under-the-hood to manage scrolling) by overriding the delegate on the&nbsp;UILongPressGestureRecognizer&nbsp;we created above and implementing the following delegate method:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class Button: UIView, UIGestureRecognizerDelegate {\n\nlongPressGesture.delegate = self\n\nfunc gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {\n    return true\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>By returning true we’re allowing any touches beneath our&nbsp;UILongPressGestureRecognizer&nbsp;to still be called.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Smoothing Animations</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We’ve got our button animating now as soon as the user begins a touch down, we’re not stopping our screen from scrolling but now our we can’t stop our button&nbsp;.ended&nbsp;notification from being called. To fix this we simply guard against the function being called after the user begins to scroll:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>var safeArea: CGFloat { return 5.0 }\n\n@objc func onLongPressRecognised(_ sender: UILongPressGestureRecognizer) {\n           \nswitch sender.state {\n        \ncase .began:\n            \n    self.initialPos = sender.location(in: parent)\n    UIView.animate(withDuration: 0.2, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .init(scaleX: 0.95, y: 0.95)\n    })\n\ncase .changed:\n    let loc = sender.location(in: parent)\n    \n    if loc.x &lt; (initialPos.x - safeArea)\n                || loc.x > (initialPos.x + safeArea)\n                || loc.y &lt; (initialPos.y - safeArea)\n                || loc.y > (initialPos.y + safeArea) {\n                self.isCancelled = true\n                sender.state = .ended\n            }\ncase .ended:\n    UIView.animate(withDuration: 0.3, delay: 0.0, options: &#91;.allowUserInteraction], animations: {\n        self.animatedView?.transform = .identity\n    })\n    if isCancelled { \n        isCancelled = false\n    } else {\n        .. // do stuff\n    }\n}}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can see I’ve used a safe area here to make the cancellation of this gesture less sensitive and allow a better user experience.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5><br><strong><strong>Conclusion</strong></strong></h5>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Smooth button animations create an entertaining, interactive user experience. Although Apple loves to use these animations in their apps, they don’t make it readily known to developers how they can implement similar features.&nbsp;UILongPressGestureRecognizer&nbsp;is a very flexible class with a lot of room for experimentation and creativity in creating a rich user interface.</p>\n<!-- /wp:paragraph -->','Animating Views With UILongPressGestureRecognizer','','inherit','closed','closed','','40-revision-v1','','','2020-08-22 12:32:17','2020-08-22 04:32:17','',40,'https://willconnelly.com.au/index.php/2020/08/22/40-revision-v1/',0,'revision','',0),(94,1,'2020-08-22 12:36:31','2020-08-22 04:36:31','<!-- wp:quote {\"className\":\"is-style-default\"} -->\n<blockquote class=\"wp-block-quote is-style-default\"><p>Thanks for your interest! What can I do for you?</p></blockquote>\n<!-- /wp:quote -->\n\n<p>[contact-form-7 id=\"24\" title=\"Contact form 1\"]</p>','Contact','','inherit','closed','closed','','5-revision-v1','','','2020-08-22 12:36:31','2020-08-22 04:36:31','',5,'https://willconnelly.com.au/index.php/2020/08/22/5-revision-v1/',0,'revision','',0),(96,1,'2020-09-03 07:31:01','2020-09-02 23:31:01','<!-- wp:quote {\"className\":\"is-style-default\"} -->\n<blockquote class=\"wp-block-quote is-style-default\"><p>Hello, what can I do for you?</p></blockquote>\n<!-- /wp:quote -->\n\n<p>[contact-form-7 id=\"24\" title=\"Contact form 1\"]</p>','Contact','','inherit','closed','closed','','5-revision-v1','','','2020-09-03 07:31:01','2020-09-02 23:31:01','',5,'https://willconnelly.com.au/index.php/2020/09/03/5-revision-v1/',0,'revision','',0),(98,1,'2020-10-11 10:35:30','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2020-10-11 10:35:30','0000-00-00 00:00:00','',0,'https://willconnelly.com.au/?p=98',0,'post','',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_relationships`
--

DROP TABLE IF EXISTS `wp_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `term_order` int(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_relationships`
--

LOCK TABLES `wp_term_relationships` WRITE;
/*!40000 ALTER TABLE `wp_term_relationships` DISABLE KEYS */;
INSERT INTO `wp_term_relationships` VALUES (27,2,0),(28,2,0),(40,3,0),(40,4,0),(40,5,0),(40,6,0),(50,7,0),(50,8,0),(50,9,0),(50,10,0),(61,3,0),(61,4,0),(61,5,0),(61,6,0);
/*!40000 ALTER TABLE `wp_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_taxonomy`
--

DROP TABLE IF EXISTS `wp_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `taxonomy` varchar(32) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `description` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT 0,
  `count` bigint(20) NOT NULL DEFAULT 0,
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_taxonomy`
--

LOCK TABLES `wp_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `wp_term_taxonomy` DISABLE KEYS */;
INSERT INTO `wp_term_taxonomy` VALUES (1,1,'category','',0,0),(2,2,'nav_menu','',0,2),(3,3,'post_tag','',0,2),(4,4,'post_tag','',0,2),(5,5,'category','',0,2),(6,6,'category','',5,2),(7,7,'category','',0,1),(8,8,'category','',7,1),(9,9,'post_tag','',0,1),(10,10,'post_tag','',0,1);
/*!40000 ALTER TABLE `wp_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_termmeta`
--

DROP TABLE IF EXISTS `wp_termmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_termmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`meta_id`),
  KEY `term_id` (`term_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_termmeta`
--

LOCK TABLES `wp_termmeta` WRITE;
/*!40000 ALTER TABLE `wp_termmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_termmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_terms`
--

DROP TABLE IF EXISTS `wp_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `slug` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT 0,
  PRIMARY KEY (`term_id`),
  KEY `slug` (`slug`(191)),
  KEY `name` (`name`(191))
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_terms`
--

LOCK TABLES `wp_terms` WRITE;
/*!40000 ALTER TABLE `wp_terms` DISABLE KEYS */;
INSERT INTO `wp_terms` VALUES (1,'Uncategorised','uncategorised',0),(2,'Main','main',0),(3,'iOS','ios',0),(4,'Swift','swift',0),(5,'iOS','ios',0),(6,'Swift','swift',0),(7,'Android','android',0),(8,'Kotlin','kotlin',0),(9,'Android','android',0),(10,'Kotlin','kotlin',0);
/*!40000 ALTER TABLE `wp_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_usermeta`
--

DROP TABLE IF EXISTS `wp_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT 0,
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_usermeta`
--

LOCK TABLES `wp_usermeta` WRITE;
/*!40000 ALTER TABLE `wp_usermeta` DISABLE KEYS */;
INSERT INTO `wp_usermeta` VALUES (1,1,'nickname','Will'),(2,1,'first_name',''),(3,1,'last_name',''),(4,1,'description','Software Developer based in Perth, Western Australia. Currently working with Vault Group Pty Ltd, a property technology company in Perth, as Head of Mobile Applications.'),(5,1,'rich_editing','true'),(6,1,'syntax_highlighting','true'),(7,1,'comment_shortcuts','false'),(8,1,'admin_color','coffee'),(9,1,'use_ssl','0'),(10,1,'show_admin_bar_front','true'),(11,1,'locale',''),(12,1,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(13,1,'wp_user_level','10'),(14,1,'dismissed_wp_pointers','theme_editor_notice'),(15,1,'show_welcome_panel','1'),(16,1,'session_tokens','a:1:{s:64:\"0db76cb31fa4a83afdd566dd021218bc3f0fb672c2bb22f6562c39eab4ff7622\";a:4:{s:10:\"expiration\";i:1602556529;s:2:\"ip\";s:12:\"45.67.96.217\";s:2:\"ua\";s:121:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36\";s:5:\"login\";i:1602383729;}}'),(17,1,'wp_dashboard_quick_press_last_post_id','98'),(18,1,'community-events-location','a:1:{s:2:\"ip\";s:10:\"45.67.96.0\";}'),(19,1,'wp_user-settings','libraryContent=browse'),(20,1,'wp_user-settings-time','1597550433'),(21,1,'closedpostboxes_page','a:0:{}'),(22,1,'metaboxhidden_page','a:0:{}'),(23,1,'managenav-menuscolumnshidden','a:5:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";i:4;s:15:\"title-attribute\";}'),(24,1,'metaboxhidden_nav-menus','a:2:{i:0;s:12:\"add-post_tag\";i:1;s:15:\"add-post_format\";}'),(25,1,'closedpostboxes_post','a:0:{}'),(26,1,'metaboxhidden_post','a:0:{}');
/*!40000 ALTER TABLE `wp_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_users`
--

DROP TABLE IF EXISTS `wp_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_pass` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT 0,
  `display_name` varchar(250) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`),
  KEY `user_email` (`user_email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_users`
--

LOCK TABLES `wp_users` WRITE;
/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;
INSERT INTO `wp_users` VALUES (1,'root','$P$BR/OwrCALb9P9GtgwiQTFRVgPd2tHA/','root','connelly.william@gmail.com','https://willconnelly.com.au','2020-08-15 14:51:14','',0,'Will');
/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_wpmailsmtp_tasks_meta`
--

DROP TABLE IF EXISTS `wp_wpmailsmtp_tasks_meta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_wpmailsmtp_tasks_meta` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `action` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `data` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_wpmailsmtp_tasks_meta`
--

LOCK TABLES `wp_wpmailsmtp_tasks_meta` WRITE;
/*!40000 ALTER TABLE `wp_wpmailsmtp_tasks_meta` DISABLE KEYS */;
INSERT INTO `wp_wpmailsmtp_tasks_meta` VALUES (1,'wp_mail_smtp_admin_notifications_update','W10=','2020-08-22 03:57:29'),(2,'wp_mail_smtp_admin_notifications_update','W10=','2020-08-24 04:02:16'),(3,'wp_mail_smtp_admin_notifications_update','W10=','2020-08-28 10:46:44'),(4,'wp_mail_smtp_admin_notifications_update','W10=','2020-09-02 10:06:39'),(5,'wp_mail_smtp_admin_notifications_update','W10=','2020-09-27 07:54:17'),(6,'wp_mail_smtp_admin_notifications_update','W10=','2020-10-11 02:35:30');
/*!40000 ALTER TABLE `wp_wpmailsmtp_tasks_meta` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-10-15 11:29:24
